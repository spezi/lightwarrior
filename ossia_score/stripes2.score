{"Document":{"ObjectName":"Scenario::ScenarioDocumentModel","id":1,"BaseScenario":{"ObjectName":"Scenario::BaseScenario","id":0,"Constraint":{"ObjectName":"Scenario::IntervalModel","id":0,"Metadata":{"ScriptingName":"stripes2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":40,"Metadata":{"ScriptingName":"RGB EQ","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[2281.23,-814.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by VIDVOX\",\n\t\"ISFVSN\": \"2\",\n\t\"CATEGORIES\": [\n\t\t\"Color Adjustment\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\": \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"red\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 2.0,\n\t\t\t\"DEFAULT\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"green\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 2.0,\n\t\t\t\"DEFAULT\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"blue\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 2.0,\n\t\t\t\"DEFAULT\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"gain\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": -1.0,\n\t\t\t\"MAX\": 1.0,\n\t\t\t\"DEFAULT\": 0.0\n\t\t}\n\t]\n}*/\n\n\n\n\nvoid main() {\n\tvec4\tpixel = IMG_THIS_PIXEL(inputImage);\t\n\tfloat\tbrightness = (pixel.r * red + pixel.g * green + pixel.b * blue) / 3.0;\n\t\n\tpixel.r = pixel.r * red;\n\tpixel.g = pixel.g * green;\n\tpixel.b = pixel.b * blue;\n\n\tif (gain >= 0.0)\t{\n\t\tpixel.a = (brightness >= gain) ? pixel.a : 0.0;\n\t}\n\telse\t{\n\t\tpixel.a = (brightness <= 1.0-abs(gain)) ? pixel.a : 0.0;\n\t}\n\tgl_FragColor = pixel;\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"red","Exposed":"red","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":2.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"green","Exposed":"green","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":2.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"blue","Exposed":"blue","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":2.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"gain","Exposed":"gain","Value":{"Float":0.0},"Domain":{"Float":{"Min":-1.0,"Max":1.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false,"Address":"Window:/"}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":39,"Metadata":{"ScriptingName":"Video Mixer.4","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[1487.23,-587.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"General\"\n    ],\n    \"CREDIT\": \"Jamie Owen, Jean-MichaÃ«l Celerier\",\n    \"DESCRIPTION\": \"8-channel video mixer\",\n    \"INPUTS\": [\n        { \"NAME\": \"t1\", \"LABEL\" : \"Texture 1\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t2\", \"LABEL\" : \"Texture 2\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t3\", \"LABEL\" : \"Texture 3\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t4\", \"LABEL\" : \"Texture 4\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t5\", \"LABEL\" : \"Texture 5\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t6\", \"LABEL\" : \"Texture 6\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t7\", \"LABEL\" : \"Texture 7\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t8\", \"LABEL\" : \"Texture 8\", \"TYPE\": \"image\" },\n        { \"NAME\": \"alpha1\", \"LABEL\" : \"Alpha 1\", \"DEFAULT\": 1, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha2\", \"LABEL\" : \"Alpha 2\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha3\", \"LABEL\" : \"Alpha 3\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha4\", \"LABEL\" : \"Alpha 4\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha5\", \"LABEL\" : \"Alpha 5\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha6\", \"LABEL\" : \"Alpha 6\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha7\", \"LABEL\" : \"Alpha 7\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha8\", \"LABEL\" : \"Alpha 8\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 1\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode1\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 2\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode2\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 3\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode3\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 4\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode4\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 5\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode5\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 6\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode6\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 7\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode7\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n/* Blend mode implementations courtesy of Jamie Owen:\n\n   https://github.com/jamieowen/glsl-blend\n\nThe MIT License (MIT) Copyright (c) 2015 Jamie Owen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\nvec3 blendPhoenix(vec3 base, vec3 blend) {\n  return min(base, blend) - max(base, blend) + vec3(1.0);\n}\n\nvec3 blendPhoenix(vec3 base, vec3 blend, float opacity) {\n  return (blendPhoenix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendOverlay(float base, float blend) {\n  return base < 0.5 ? (2.0 * base * blend)\n                    : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return vec3(blendOverlay(base.r, blend.r), blendOverlay(base.g, blend.g),\n              blendOverlay(base.b, blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n  return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNormal(vec3 base, vec3 blend) { return blend; }\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNegation(vec3 base, vec3 blend) {\n  return vec3(1.0) - abs(vec3(1.0) - base - blend);\n}\n\nvec3 blendNegation(vec3 base, vec3 blend, float opacity) {\n  return (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend) { return base * blend; }\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n  return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendReflect(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0);\n}\n\nvec3 blendReflect(vec3 base, vec3 blend) {\n  return vec3(blendReflect(base.r, blend.r), blendReflect(base.g, blend.g),\n              blendReflect(base.b, blend.b));\n}\n\nvec3 blendReflect(vec3 base, vec3 blend, float opacity) {\n  return (blendReflect(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendAverage(vec3 base, vec3 blend) { return (base + blend) / 2.0; }\n\nvec3 blendAverage(vec3 base, vec3 blend, float opacity) {\n  return (blendAverage(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearBurn(float base, float blend) {\n  // Note : Same implementation as BlendSubtractf\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendSubtract\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLighten(float base, float blend) { return max(blend, base); }\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return vec3(blendLighten(base.r, blend.r), blendLighten(base.g, blend.g),\n              blendLighten(base.b, blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n  return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendScreen(float base, float blend) {\n  return 1.0 - ((1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n  return vec3(blendScreen(base.r, blend.r), blendScreen(base.g, blend.g),\n              blendScreen(base.b, blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n  return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSoftLight(float base, float blend) {\n  return (blend < 0.5)\n             ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend))\n             : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return vec3(blendSoftLight(base.r, blend.r), blendSoftLight(base.g, blend.g),\n              blendSoftLight(base.b, blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n  return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSubtract(float base, float blend) {\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend) {\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend, float opacity) {\n  return (blendSubtract(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend, float opacity) {\n  return (blendExclusion(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendDifference(vec3 base, vec3 blend) { return abs(base - blend); }\n\nvec3 blendDifference(vec3 base, vec3 blend, float opacity) {\n  return (blendDifference(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendDarken(float base, float blend) { return min(blend, base); }\n\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return vec3(blendDarken(base.r, blend.r), blendDarken(base.g, blend.g),\n              blendDarken(base.b, blend.b));\n}\n\nvec3 blendDarken(vec3 base, vec3 blend, float opacity) {\n  return (blendDarken(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorDodge(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return vec3(blendColorDodge(base.r, blend.r),\n              blendColorDodge(base.g, blend.g),\n              blendColorDodge(base.b, blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorBurn(float base, float blend) {\n  return (blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return vec3(blendColorBurn(base.r, blend.r), blendColorBurn(base.g, blend.g),\n              blendColorBurn(base.b, blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendAdd(float base, float blend) { return min(base + blend, 1.0); }\n\nvec3 blendAdd(vec3 base, vec3 blend) { return min(base + blend, vec3(1.0)); }\n\nvec3 blendAdd(vec3 base, vec3 blend, float opacity) {\n  return (blendAdd(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearDodge(float base, float blend) {\n  // Note : Same implementation as BlendAddf\n  return min(base + blend, 1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendAdd\n  return min(base + blend, vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend) { return blendOverlay(blend, base); }\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n  return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendGlow(vec3 base, vec3 blend) { return blendReflect(blend, base); }\n\nvec3 blendGlow(vec3 base, vec3 blend, float opacity) {\n  return (blendGlow(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendVividLight(float base, float blend) {\n  return (blend < 0.5) ? blendColorBurn(base, (2.0 * blend))\n                       : blendColorDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n  return vec3(blendVividLight(base.r, blend.r),\n              blendVividLight(base.g, blend.g),\n              blendVividLight(base.b, blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n  return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendHardMix(float base, float blend) {\n  return (blendVividLight(base, blend) < 0.5) ? 0.0 : 1.0;\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend) {\n  return vec3(blendHardMix(base.r, blend.r), blendHardMix(base.g, blend.g),\n              blendHardMix(base.b, blend.b));\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend, float opacity) {\n  return (blendHardMix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearLight(float base, float blend) {\n  return blend < 0.5 ? blendLinearBurn(base, (2.0 * blend))\n                     : blendLinearDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n  return vec3(blendLinearLight(base.r, blend.r),\n              blendLinearLight(base.g, blend.g),\n              blendLinearLight(base.b, blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendPinLight(float base, float blend) {\n  return (blend < 0.5) ? blendDarken(base, (2.0 * blend))\n                       : blendLighten(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend) {\n  return vec3(blendPinLight(base.r, blend.r), blendPinLight(base.g, blend.g),\n              blendPinLight(base.b, blend.b));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend, float opacity) {\n  return (blendPinLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend) {\n  if (mode == 1) {\n    return blendAdd(base, blend);\n  } else if (mode == 2) {\n    return blendAverage(base, blend);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend);\n  } else if (mode == 5) {\n    return blendDarken(base, blend);\n  } else if (mode == 6) {\n    return blendDifference(base, blend);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend);\n  } else if (mode == 8) {\n    return blendGlow(base, blend);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend);\n  } else if (mode == 11) {\n    return blendLighten(base, blend);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend);\n  } else if (mode == 16) {\n    return blendNegation(base, blend);\n  } else if (mode == 17) {\n    return blendNormal(base, blend);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend);\n  } else if (mode == 21) {\n    return blendReflect(base, blend);\n  } else if (mode == 22) {\n    return blendScreen(base, blend);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend);\n  }\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend, float opacity) {\n  if (mode == 1) {\n    return blendAdd(base, blend, opacity);\n  } else if (mode == 2) {\n    return blendAverage(base, blend, opacity);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend, opacity);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend, opacity);\n  } else if (mode == 5) {\n    return blendDarken(base, blend, opacity);\n  } else if (mode == 6) {\n    return blendDifference(base, blend, opacity);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend, opacity);\n  } else if (mode == 8) {\n    return blendGlow(base, blend, opacity);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend, opacity);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend, opacity);\n  } else if (mode == 11) {\n    return blendLighten(base, blend, opacity);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend, opacity);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend, opacity);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend, opacity);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend, opacity);\n  } else if (mode == 16) {\n    return blendNegation(base, blend, opacity);\n  } else if (mode == 17) {\n    return blendNormal(base, blend, opacity);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend, opacity);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend, opacity);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend, opacity);\n  } else if (mode == 21) {\n    return blendReflect(base, blend, opacity);\n  } else if (mode == 22) {\n    return blendScreen(base, blend, opacity);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend, opacity);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend, opacity);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend, opacity);\n  }\n}\n\nvoid main()\t{\n  gl_FragColor.rgb = \n    blendMode(mode1, alpha1 * IMG_THIS_NORM_PIXEL(t1).rgb * IMG_THIS_NORM_PIXEL(t1).a,\n    blendMode(mode2, alpha2 * IMG_THIS_NORM_PIXEL(t2).rgb * IMG_THIS_NORM_PIXEL(t2).a,\n    blendMode(mode3, alpha3 * IMG_THIS_NORM_PIXEL(t3).rgb * IMG_THIS_NORM_PIXEL(t3).a,\n    blendMode(mode4, alpha4 * IMG_THIS_NORM_PIXEL(t4).rgb * IMG_THIS_NORM_PIXEL(t4).a,\n    blendMode(mode5, alpha5 * IMG_THIS_NORM_PIXEL(t5).rgb * IMG_THIS_NORM_PIXEL(t5).a,\n    blendMode(mode6, alpha6 * IMG_THIS_NORM_PIXEL(t6).rgb * IMG_THIS_NORM_PIXEL(t6).a,\n    blendMode(mode7, alpha7 * IMG_THIS_NORM_PIXEL(t7).rgb * IMG_THIS_NORM_PIXEL(t7).a,\n                     alpha8 * IMG_THIS_NORM_PIXEL(t8).rgb * IMG_THIS_NORM_PIXEL(t8).a)))))));\n\n  gl_FragColor.a = 1.0; \n}","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":1,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":2,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":3,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":4,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":5,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":6,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":7,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"alpha1","Exposed":"alpha1","Address":"Code Controls:/1/control/4","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"alpha2","Exposed":"alpha2","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"alpha3","Exposed":"alpha3","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":11,"Hidden":true,"Custom":"alpha4","Exposed":"alpha4","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":12,"Hidden":true,"Custom":"alpha5","Exposed":"alpha5","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":13,"Hidden":true,"Custom":"alpha6","Exposed":"alpha6","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":14,"Hidden":true,"Custom":"alpha7","Exposed":"alpha7","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":15,"Hidden":true,"Custom":"alpha8","Exposed":"alpha8","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":16,"Hidden":true,"Custom":"mode1","Exposed":"mode1","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":17,"Hidden":true,"Custom":"mode2","Exposed":"mode2","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":18,"Hidden":true,"Custom":"mode3","Exposed":"mode3","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":19,"Hidden":true,"Custom":"mode4","Exposed":"mode4","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":20,"Hidden":true,"Custom":"mode5","Exposed":"mode5","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":21,"Hidden":true,"Custom":"mode6","Exposed":"mode6","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":22,"Hidden":true,"Custom":"mode7","Exposed":"mode7","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":38,"Metadata":{"ScriptingName":"Video Mixer.3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[1872.23,-817.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"General\"\n    ],\n    \"CREDIT\": \"Jamie Owen, Jean-MichaÃ«l Celerier\",\n    \"DESCRIPTION\": \"8-channel video mixer\",\n    \"INPUTS\": [\n        { \"NAME\": \"t1\", \"LABEL\" : \"Texture 1\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t2\", \"LABEL\" : \"Texture 2\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t3\", \"LABEL\" : \"Texture 3\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t4\", \"LABEL\" : \"Texture 4\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t5\", \"LABEL\" : \"Texture 5\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t6\", \"LABEL\" : \"Texture 6\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t7\", \"LABEL\" : \"Texture 7\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t8\", \"LABEL\" : \"Texture 8\", \"TYPE\": \"image\" },\n        { \"NAME\": \"alpha1\", \"LABEL\" : \"Alpha 1\", \"DEFAULT\": 1, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha2\", \"LABEL\" : \"Alpha 2\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha3\", \"LABEL\" : \"Alpha 3\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha4\", \"LABEL\" : \"Alpha 4\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha5\", \"LABEL\" : \"Alpha 5\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha6\", \"LABEL\" : \"Alpha 6\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha7\", \"LABEL\" : \"Alpha 7\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha8\", \"LABEL\" : \"Alpha 8\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 1\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode1\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 2\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode2\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 3\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode3\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 4\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode4\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 5\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode5\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 6\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode6\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 7\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode7\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n/* Blend mode implementations courtesy of Jamie Owen:\n\n   https://github.com/jamieowen/glsl-blend\n\nThe MIT License (MIT) Copyright (c) 2015 Jamie Owen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\nvec3 blendPhoenix(vec3 base, vec3 blend) {\n  return min(base, blend) - max(base, blend) + vec3(1.0);\n}\n\nvec3 blendPhoenix(vec3 base, vec3 blend, float opacity) {\n  return (blendPhoenix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendOverlay(float base, float blend) {\n  return base < 0.5 ? (2.0 * base * blend)\n                    : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return vec3(blendOverlay(base.r, blend.r), blendOverlay(base.g, blend.g),\n              blendOverlay(base.b, blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n  return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNormal(vec3 base, vec3 blend) { return blend; }\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNegation(vec3 base, vec3 blend) {\n  return vec3(1.0) - abs(vec3(1.0) - base - blend);\n}\n\nvec3 blendNegation(vec3 base, vec3 blend, float opacity) {\n  return (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend) { return base * blend; }\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n  return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendReflect(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0);\n}\n\nvec3 blendReflect(vec3 base, vec3 blend) {\n  return vec3(blendReflect(base.r, blend.r), blendReflect(base.g, blend.g),\n              blendReflect(base.b, blend.b));\n}\n\nvec3 blendReflect(vec3 base, vec3 blend, float opacity) {\n  return (blendReflect(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendAverage(vec3 base, vec3 blend) { return (base + blend) / 2.0; }\n\nvec3 blendAverage(vec3 base, vec3 blend, float opacity) {\n  return (blendAverage(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearBurn(float base, float blend) {\n  // Note : Same implementation as BlendSubtractf\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendSubtract\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLighten(float base, float blend) { return max(blend, base); }\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return vec3(blendLighten(base.r, blend.r), blendLighten(base.g, blend.g),\n              blendLighten(base.b, blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n  return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendScreen(float base, float blend) {\n  return 1.0 - ((1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n  return vec3(blendScreen(base.r, blend.r), blendScreen(base.g, blend.g),\n              blendScreen(base.b, blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n  return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSoftLight(float base, float blend) {\n  return (blend < 0.5)\n             ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend))\n             : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return vec3(blendSoftLight(base.r, blend.r), blendSoftLight(base.g, blend.g),\n              blendSoftLight(base.b, blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n  return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSubtract(float base, float blend) {\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend) {\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend, float opacity) {\n  return (blendSubtract(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend, float opacity) {\n  return (blendExclusion(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendDifference(vec3 base, vec3 blend) { return abs(base - blend); }\n\nvec3 blendDifference(vec3 base, vec3 blend, float opacity) {\n  return (blendDifference(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendDarken(float base, float blend) { return min(blend, base); }\n\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return vec3(blendDarken(base.r, blend.r), blendDarken(base.g, blend.g),\n              blendDarken(base.b, blend.b));\n}\n\nvec3 blendDarken(vec3 base, vec3 blend, float opacity) {\n  return (blendDarken(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorDodge(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return vec3(blendColorDodge(base.r, blend.r),\n              blendColorDodge(base.g, blend.g),\n              blendColorDodge(base.b, blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorBurn(float base, float blend) {\n  return (blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return vec3(blendColorBurn(base.r, blend.r), blendColorBurn(base.g, blend.g),\n              blendColorBurn(base.b, blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendAdd(float base, float blend) { return min(base + blend, 1.0); }\n\nvec3 blendAdd(vec3 base, vec3 blend) { return min(base + blend, vec3(1.0)); }\n\nvec3 blendAdd(vec3 base, vec3 blend, float opacity) {\n  return (blendAdd(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearDodge(float base, float blend) {\n  // Note : Same implementation as BlendAddf\n  return min(base + blend, 1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendAdd\n  return min(base + blend, vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend) { return blendOverlay(blend, base); }\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n  return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendGlow(vec3 base, vec3 blend) { return blendReflect(blend, base); }\n\nvec3 blendGlow(vec3 base, vec3 blend, float opacity) {\n  return (blendGlow(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendVividLight(float base, float blend) {\n  return (blend < 0.5) ? blendColorBurn(base, (2.0 * blend))\n                       : blendColorDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n  return vec3(blendVividLight(base.r, blend.r),\n              blendVividLight(base.g, blend.g),\n              blendVividLight(base.b, blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n  return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendHardMix(float base, float blend) {\n  return (blendVividLight(base, blend) < 0.5) ? 0.0 : 1.0;\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend) {\n  return vec3(blendHardMix(base.r, blend.r), blendHardMix(base.g, blend.g),\n              blendHardMix(base.b, blend.b));\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend, float opacity) {\n  return (blendHardMix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearLight(float base, float blend) {\n  return blend < 0.5 ? blendLinearBurn(base, (2.0 * blend))\n                     : blendLinearDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n  return vec3(blendLinearLight(base.r, blend.r),\n              blendLinearLight(base.g, blend.g),\n              blendLinearLight(base.b, blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendPinLight(float base, float blend) {\n  return (blend < 0.5) ? blendDarken(base, (2.0 * blend))\n                       : blendLighten(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend) {\n  return vec3(blendPinLight(base.r, blend.r), blendPinLight(base.g, blend.g),\n              blendPinLight(base.b, blend.b));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend, float opacity) {\n  return (blendPinLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend) {\n  if (mode == 1) {\n    return blendAdd(base, blend);\n  } else if (mode == 2) {\n    return blendAverage(base, blend);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend);\n  } else if (mode == 5) {\n    return blendDarken(base, blend);\n  } else if (mode == 6) {\n    return blendDifference(base, blend);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend);\n  } else if (mode == 8) {\n    return blendGlow(base, blend);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend);\n  } else if (mode == 11) {\n    return blendLighten(base, blend);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend);\n  } else if (mode == 16) {\n    return blendNegation(base, blend);\n  } else if (mode == 17) {\n    return blendNormal(base, blend);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend);\n  } else if (mode == 21) {\n    return blendReflect(base, blend);\n  } else if (mode == 22) {\n    return blendScreen(base, blend);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend);\n  }\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend, float opacity) {\n  if (mode == 1) {\n    return blendAdd(base, blend, opacity);\n  } else if (mode == 2) {\n    return blendAverage(base, blend, opacity);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend, opacity);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend, opacity);\n  } else if (mode == 5) {\n    return blendDarken(base, blend, opacity);\n  } else if (mode == 6) {\n    return blendDifference(base, blend, opacity);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend, opacity);\n  } else if (mode == 8) {\n    return blendGlow(base, blend, opacity);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend, opacity);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend, opacity);\n  } else if (mode == 11) {\n    return blendLighten(base, blend, opacity);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend, opacity);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend, opacity);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend, opacity);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend, opacity);\n  } else if (mode == 16) {\n    return blendNegation(base, blend, opacity);\n  } else if (mode == 17) {\n    return blendNormal(base, blend, opacity);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend, opacity);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend, opacity);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend, opacity);\n  } else if (mode == 21) {\n    return blendReflect(base, blend, opacity);\n  } else if (mode == 22) {\n    return blendScreen(base, blend, opacity);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend, opacity);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend, opacity);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend, opacity);\n  }\n}\n\nvoid main()\t{\n  gl_FragColor.rgb = \n    blendMode(mode1, alpha1 * IMG_THIS_NORM_PIXEL(t1).rgb * IMG_THIS_NORM_PIXEL(t1).a,\n    blendMode(mode2, alpha2 * IMG_THIS_NORM_PIXEL(t2).rgb * IMG_THIS_NORM_PIXEL(t2).a,\n    blendMode(mode3, alpha3 * IMG_THIS_NORM_PIXEL(t3).rgb * IMG_THIS_NORM_PIXEL(t3).a,\n    blendMode(mode4, alpha4 * IMG_THIS_NORM_PIXEL(t4).rgb * IMG_THIS_NORM_PIXEL(t4).a,\n    blendMode(mode5, alpha5 * IMG_THIS_NORM_PIXEL(t5).rgb * IMG_THIS_NORM_PIXEL(t5).a,\n    blendMode(mode6, alpha6 * IMG_THIS_NORM_PIXEL(t6).rgb * IMG_THIS_NORM_PIXEL(t6).a,\n    blendMode(mode7, alpha7 * IMG_THIS_NORM_PIXEL(t7).rgb * IMG_THIS_NORM_PIXEL(t7).a,\n                     alpha8 * IMG_THIS_NORM_PIXEL(t8).rgb * IMG_THIS_NORM_PIXEL(t8).a)))))));\n\n  gl_FragColor.a = 1.0; \n}","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":1,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":2,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":3,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":4,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":5,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":6,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":7,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"alpha1","Exposed":"alpha1","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"alpha2","Exposed":"alpha2","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"alpha3","Exposed":"alpha3","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":11,"Hidden":true,"Custom":"alpha4","Exposed":"alpha4","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":12,"Hidden":true,"Custom":"alpha5","Exposed":"alpha5","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":13,"Hidden":true,"Custom":"alpha6","Exposed":"alpha6","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":14,"Hidden":true,"Custom":"alpha7","Exposed":"alpha7","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":15,"Hidden":true,"Custom":"alpha8","Exposed":"alpha8","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":16,"Hidden":true,"Custom":"mode1","Exposed":"mode1","Value":{"Int":15},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":17,"Hidden":true,"Custom":"mode2","Exposed":"mode2","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":18,"Hidden":true,"Custom":"mode3","Exposed":"mode3","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":19,"Hidden":true,"Custom":"mode4","Exposed":"mode4","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":20,"Hidden":true,"Custom":"mode5","Exposed":"mode5","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":21,"Hidden":true,"Custom":"mode6","Exposed":"mode6","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":22,"Hidden":true,"Custom":"mode7","Exposed":"mode7","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":37,"Metadata":{"ScriptingName":"Video Mixer.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[1057.23,-1387.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"General\"\n    ],\n    \"CREDIT\": \"Jamie Owen, Jean-MichaÃ«l Celerier\",\n    \"DESCRIPTION\": \"8-channel video mixer\",\n    \"INPUTS\": [\n        { \"NAME\": \"t1\", \"LABEL\" : \"Texture 1\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t2\", \"LABEL\" : \"Texture 2\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t3\", \"LABEL\" : \"Texture 3\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t4\", \"LABEL\" : \"Texture 4\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t5\", \"LABEL\" : \"Texture 5\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t6\", \"LABEL\" : \"Texture 6\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t7\", \"LABEL\" : \"Texture 7\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t8\", \"LABEL\" : \"Texture 8\", \"TYPE\": \"image\" },\n        { \"NAME\": \"alpha1\", \"LABEL\" : \"Alpha 1\", \"DEFAULT\": 1, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha2\", \"LABEL\" : \"Alpha 2\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha3\", \"LABEL\" : \"Alpha 3\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha4\", \"LABEL\" : \"Alpha 4\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha5\", \"LABEL\" : \"Alpha 5\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha6\", \"LABEL\" : \"Alpha 6\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha7\", \"LABEL\" : \"Alpha 7\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha8\", \"LABEL\" : \"Alpha 8\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 1\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode1\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 2\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode2\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 3\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode3\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 4\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode4\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 5\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode5\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 6\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode6\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 7\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode7\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n/* Blend mode implementations courtesy of Jamie Owen:\n\n   https://github.com/jamieowen/glsl-blend\n\nThe MIT License (MIT) Copyright (c) 2015 Jamie Owen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\nvec3 blendPhoenix(vec3 base, vec3 blend) {\n  return min(base, blend) - max(base, blend) + vec3(1.0);\n}\n\nvec3 blendPhoenix(vec3 base, vec3 blend, float opacity) {\n  return (blendPhoenix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendOverlay(float base, float blend) {\n  return base < 0.5 ? (2.0 * base * blend)\n                    : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return vec3(blendOverlay(base.r, blend.r), blendOverlay(base.g, blend.g),\n              blendOverlay(base.b, blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n  return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNormal(vec3 base, vec3 blend) { return blend; }\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNegation(vec3 base, vec3 blend) {\n  return vec3(1.0) - abs(vec3(1.0) - base - blend);\n}\n\nvec3 blendNegation(vec3 base, vec3 blend, float opacity) {\n  return (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend) { return base * blend; }\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n  return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendReflect(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0);\n}\n\nvec3 blendReflect(vec3 base, vec3 blend) {\n  return vec3(blendReflect(base.r, blend.r), blendReflect(base.g, blend.g),\n              blendReflect(base.b, blend.b));\n}\n\nvec3 blendReflect(vec3 base, vec3 blend, float opacity) {\n  return (blendReflect(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendAverage(vec3 base, vec3 blend) { return (base + blend) / 2.0; }\n\nvec3 blendAverage(vec3 base, vec3 blend, float opacity) {\n  return (blendAverage(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearBurn(float base, float blend) {\n  // Note : Same implementation as BlendSubtractf\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendSubtract\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLighten(float base, float blend) { return max(blend, base); }\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return vec3(blendLighten(base.r, blend.r), blendLighten(base.g, blend.g),\n              blendLighten(base.b, blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n  return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendScreen(float base, float blend) {\n  return 1.0 - ((1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n  return vec3(blendScreen(base.r, blend.r), blendScreen(base.g, blend.g),\n              blendScreen(base.b, blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n  return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSoftLight(float base, float blend) {\n  return (blend < 0.5)\n             ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend))\n             : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return vec3(blendSoftLight(base.r, blend.r), blendSoftLight(base.g, blend.g),\n              blendSoftLight(base.b, blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n  return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSubtract(float base, float blend) {\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend) {\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend, float opacity) {\n  return (blendSubtract(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend, float opacity) {\n  return (blendExclusion(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendDifference(vec3 base, vec3 blend) { return abs(base - blend); }\n\nvec3 blendDifference(vec3 base, vec3 blend, float opacity) {\n  return (blendDifference(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendDarken(float base, float blend) { return min(blend, base); }\n\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return vec3(blendDarken(base.r, blend.r), blendDarken(base.g, blend.g),\n              blendDarken(base.b, blend.b));\n}\n\nvec3 blendDarken(vec3 base, vec3 blend, float opacity) {\n  return (blendDarken(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorDodge(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return vec3(blendColorDodge(base.r, blend.r),\n              blendColorDodge(base.g, blend.g),\n              blendColorDodge(base.b, blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorBurn(float base, float blend) {\n  return (blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return vec3(blendColorBurn(base.r, blend.r), blendColorBurn(base.g, blend.g),\n              blendColorBurn(base.b, blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendAdd(float base, float blend) { return min(base + blend, 1.0); }\n\nvec3 blendAdd(vec3 base, vec3 blend) { return min(base + blend, vec3(1.0)); }\n\nvec3 blendAdd(vec3 base, vec3 blend, float opacity) {\n  return (blendAdd(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearDodge(float base, float blend) {\n  // Note : Same implementation as BlendAddf\n  return min(base + blend, 1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendAdd\n  return min(base + blend, vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend) { return blendOverlay(blend, base); }\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n  return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendGlow(vec3 base, vec3 blend) { return blendReflect(blend, base); }\n\nvec3 blendGlow(vec3 base, vec3 blend, float opacity) {\n  return (blendGlow(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendVividLight(float base, float blend) {\n  return (blend < 0.5) ? blendColorBurn(base, (2.0 * blend))\n                       : blendColorDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n  return vec3(blendVividLight(base.r, blend.r),\n              blendVividLight(base.g, blend.g),\n              blendVividLight(base.b, blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n  return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendHardMix(float base, float blend) {\n  return (blendVividLight(base, blend) < 0.5) ? 0.0 : 1.0;\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend) {\n  return vec3(blendHardMix(base.r, blend.r), blendHardMix(base.g, blend.g),\n              blendHardMix(base.b, blend.b));\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend, float opacity) {\n  return (blendHardMix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearLight(float base, float blend) {\n  return blend < 0.5 ? blendLinearBurn(base, (2.0 * blend))\n                     : blendLinearDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n  return vec3(blendLinearLight(base.r, blend.r),\n              blendLinearLight(base.g, blend.g),\n              blendLinearLight(base.b, blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendPinLight(float base, float blend) {\n  return (blend < 0.5) ? blendDarken(base, (2.0 * blend))\n                       : blendLighten(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend) {\n  return vec3(blendPinLight(base.r, blend.r), blendPinLight(base.g, blend.g),\n              blendPinLight(base.b, blend.b));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend, float opacity) {\n  return (blendPinLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend) {\n  if (mode == 1) {\n    return blendAdd(base, blend);\n  } else if (mode == 2) {\n    return blendAverage(base, blend);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend);\n  } else if (mode == 5) {\n    return blendDarken(base, blend);\n  } else if (mode == 6) {\n    return blendDifference(base, blend);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend);\n  } else if (mode == 8) {\n    return blendGlow(base, blend);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend);\n  } else if (mode == 11) {\n    return blendLighten(base, blend);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend);\n  } else if (mode == 16) {\n    return blendNegation(base, blend);\n  } else if (mode == 17) {\n    return blendNormal(base, blend);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend);\n  } else if (mode == 21) {\n    return blendReflect(base, blend);\n  } else if (mode == 22) {\n    return blendScreen(base, blend);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend);\n  }\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend, float opacity) {\n  if (mode == 1) {\n    return blendAdd(base, blend, opacity);\n  } else if (mode == 2) {\n    return blendAverage(base, blend, opacity);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend, opacity);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend, opacity);\n  } else if (mode == 5) {\n    return blendDarken(base, blend, opacity);\n  } else if (mode == 6) {\n    return blendDifference(base, blend, opacity);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend, opacity);\n  } else if (mode == 8) {\n    return blendGlow(base, blend, opacity);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend, opacity);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend, opacity);\n  } else if (mode == 11) {\n    return blendLighten(base, blend, opacity);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend, opacity);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend, opacity);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend, opacity);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend, opacity);\n  } else if (mode == 16) {\n    return blendNegation(base, blend, opacity);\n  } else if (mode == 17) {\n    return blendNormal(base, blend, opacity);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend, opacity);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend, opacity);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend, opacity);\n  } else if (mode == 21) {\n    return blendReflect(base, blend, opacity);\n  } else if (mode == 22) {\n    return blendScreen(base, blend, opacity);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend, opacity);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend, opacity);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend, opacity);\n  }\n}\n\nvoid main()\t{\n  gl_FragColor.rgb = \n    blendMode(mode1, alpha1 * IMG_THIS_NORM_PIXEL(t1).rgb * IMG_THIS_NORM_PIXEL(t1).a,\n    blendMode(mode2, alpha2 * IMG_THIS_NORM_PIXEL(t2).rgb * IMG_THIS_NORM_PIXEL(t2).a,\n    blendMode(mode3, alpha3 * IMG_THIS_NORM_PIXEL(t3).rgb * IMG_THIS_NORM_PIXEL(t3).a,\n    blendMode(mode4, alpha4 * IMG_THIS_NORM_PIXEL(t4).rgb * IMG_THIS_NORM_PIXEL(t4).a,\n    blendMode(mode5, alpha5 * IMG_THIS_NORM_PIXEL(t5).rgb * IMG_THIS_NORM_PIXEL(t5).a,\n    blendMode(mode6, alpha6 * IMG_THIS_NORM_PIXEL(t6).rgb * IMG_THIS_NORM_PIXEL(t6).a,\n    blendMode(mode7, alpha7 * IMG_THIS_NORM_PIXEL(t7).rgb * IMG_THIS_NORM_PIXEL(t7).a,\n                     alpha8 * IMG_THIS_NORM_PIXEL(t8).rgb * IMG_THIS_NORM_PIXEL(t8).a)))))));\n\n  gl_FragColor.a = 1.0; \n}","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":1,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":2,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":3,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":4,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":5,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":6,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":7,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"alpha1","Exposed":"alpha1","Address":"Code Controls:/1/control/1","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"alpha2","Exposed":"alpha2","Address":"Code Controls:/1/control/5","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"alpha3","Exposed":"alpha3","Address":"Code Controls:/1/control/9","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":11,"Hidden":true,"Custom":"alpha4","Exposed":"alpha4","Address":"Code Controls:/1/control/13","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":12,"Hidden":true,"Custom":"alpha5","Exposed":"alpha5","Address":"Code Controls:/1/control/17","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":13,"Hidden":true,"Custom":"alpha6","Exposed":"alpha6","Address":"Code Controls:/1/control/21","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":14,"Hidden":true,"Custom":"alpha7","Exposed":"alpha7","Address":"Code Controls:/1/control/25","Value":{"Float":0.15662650763988495},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":15,"Hidden":true,"Custom":"alpha8","Exposed":"alpha8","Address":"Code Controls:/1/control/29","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":16,"Hidden":true,"Custom":"mode1","Exposed":"mode1","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":17,"Hidden":true,"Custom":"mode2","Exposed":"mode2","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":18,"Hidden":true,"Custom":"mode3","Exposed":"mode3","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":19,"Hidden":true,"Custom":"mode4","Exposed":"mode4","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":20,"Hidden":true,"Custom":"mode5","Exposed":"mode5","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":21,"Hidden":true,"Custom":"mode6","Exposed":"mode6","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":22,"Hidden":true,"Custom":"mode7","Exposed":"mode7","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":36,"Metadata":{"ScriptingName":"Solid Color","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[1118.23,-586.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"Color\",\n        \"Utility\"\n    ],\n    \"CREDIT\": \"by Carter Rosenberg\",\n    \"DESCRIPTION\": \"demonstrates the use of color-type image inputs\",\n    \"INPUTS\": [\n        {\n            \"DEFAULT\": [\n                1,\n                0,\n                0,\n                1\n            ],\n            \"NAME\": \"Color\",\n            \"TYPE\": \"color\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\nvoid main()\n{\n\tgl_FragColor = Color;\n}\n","Inlets":[{"uuid":"8f38638e-9f9f-48b0-ae36-1cba86ef5703","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"Color","Exposed":"color","Value":{"Vec4f":[1.0,1.0,1.0,1.0]},"Domain":{}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":35,"Metadata":{"ScriptingName":"gs_46322.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-658.77,348.0730000000001],"Size":[100.953125,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#46322.0\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/RENDERSIZE.xy;\n    st.x *= RENDERSIZE.x/RENDERSIZE.y;\n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(st*3.);\n\n    float DF = 0.0;\n\n    // Add a random position\n    float a = 0.0;\n    vec2 vel = vec2(TIME*.1);\n    DF += snoise(pos+vel)*.25+.25;\n\n    // Add a random position\n    a = snoise(pos*vec2(cos(TIME*0.15),sin(TIME*0.1))*0.1)*3.1415;\n    vel = vec2(cos(a),sin(a));\n    DF += snoise(pos+vel)*.5+.5;\n\n    color = vec3( smoothstep(.7,.75,fract(DF)) );\n\n    gl_FragColor = vec4(1.0-color,1.0);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":33,"Metadata":{"ScriptingName":"gs_46075.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-383.77,349.0730000000001],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#46075.2\"\n}\n*/\n\n\n//Peter Capener\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\nfloat snow(float density, float R, float speed, float seed1, float seed2, float alphaSpeed){\n\tfloat scale  = min(RENDERSIZE.x, RENDERSIZE.y) / density;\n\t\n\t\n\tfloat move = TIME*max(RENDERSIZE.x, RENDERSIZE.y)/speed;//åæ ç³»ç§»å¨çè·ç¦»\n\tvec2 uv = gl_FragCoord.xy - move;\n\t\n\tfloat cellX = floor(uv.x  / scale);\n\tfloat cellY = floor(uv.y / scale);\n\t\n\tvec2 off = vec2(cos(TIME + cellX) * R, sin(TIME + cellY) * R);//èªå¨ç§»å¨çè·ç¦»\n\t\n\tfloat random = sin(cellX*R + cellY * scale);\n\tfloat centorOff = R*2.2 + (random  + 1.) / 2. * (scale - 4.4* R);//è¾¹ç¼å¤çä¸ä¸ªåå¾ï¼åå¤çæ¯ä¸ªç²å­èªç±åç¦»çè·ç¦»é½æ¯ï¼1.0 +1.2ï¼*2*R\n\tvec2 cellCentor = vec2(cellX * scale + centorOff, cellY * scale + centorOff) + off;\n\t\n\tfloat alpha = sin(TIME / alphaSpeed + centorOff);\n\t\n\tfloat d = length(cellCentor + move - gl_FragCoord.xy);\n\tfloat k = 1.-smoothstep(R, R*1.2, d);\n\tfloat c = k * alpha;\n\treturn c;\n}\n\nvoid main( void ) {\n\tfloat c = snow(2., 10., 10., 3.241231234, 4.12341234, 1.0);\n\tif(c<0.0001)c+=snow(4., 8., 15., 3.685678567, 4.523463456, 0.8);\n\tif(c<0.0001)c+=snow(6., 6., 20., 3.345760345, 4.234709853, 1.6);\n\n\tgl_FragColor = vec4( vec3(c), max(c, 0.) );\n\t//gl_FragColor = vec4(-1.0, -1.0, -1.0, 1.);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":32,"Metadata":{"ScriptingName":"gs_45936.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[637.23,-1298.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#45936.0\"\n}\n*/\n\n\n// original by nimitz https://www.shadertoy.com/view/lsSGzy#, slightly modified, and gigatron for glslsandbox\n// added computed noise from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n// instead textured noise ; etc // \n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\n \n\t#define ray_brightness 10.\n\t#define gamma 5.\n\t#define ray_density 4.5\n\t#define curvature 15.\n\t#define red   4.\n\t#define green 1.0\n\t#define blue  0.99 \n\n \n\n#define SIZE 0.2\n\n \n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\n\n\n// FLARING GENERATOR, A.K.A PURE AWESOME\nmat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm( in vec2 p )\n{\t\n\tfloat z=8.;       // EDIT THIS TO MODIFY THE INTENSITY OF RAYS\n\tfloat rz = -0.08; // EDIT THIS TO MODIFY THE LENGTH OF RAYS\n\tp *= 0.425;        // EDIT THIS TO MODIFY THE FREQUENCY OF RAYS\n\tfor (int i= 1; i < 6; i++)\n\t{\n\t\trz+= abs((noise(p)-0.5)*2.)/z;\n\t\tz = z*2.;\n\t\tp = p*2.*m2;\n\t}\n\treturn rz;\n}\n\nvoid main()\n{\n\tfloat t = -TIME*.33; \n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy-0.5;\n\tuv.x *= RENDERSIZE.x/RENDERSIZE.y;\n\tuv*= curvature* SIZE;\n\t\n\tfloat r = sqrt(dot(uv,uv)); // DISTANCE FROM CENTER, A.K.A CIRCLE\n\tfloat x = dot(normalize(uv), vec2(.5,0.))+t;\n\tfloat y = dot(normalize(uv), vec2(.0,.5))+t;\n \n        float val=0.0;\n        val = fbm(vec2(r+ y * ray_density, r+ x * ray_density)); // GENERATES THE FLARING\n\tval = smoothstep(gamma*.02-.1,ray_brightness+(gamma*0.02-.1)+.001,val);\n\tval = sqrt(val); // WE DON'T REALLY NEED SQRT HERE, CHANGE TO 15. * val FOR PERFORMANCE\n\t\n\tvec3 col =  val/ vec3(red,green,blue);\n\tcol = 1.-col; // WE DO NOT NEED TO CLAMP THIS LIKE THE NIMITZ SHADER DOES!\n        float rad= 35. ; // MODIFY THIS TO CHANGE THE RADIUS OF THE SUNS CENTER\n\tcol = mix(col,vec3(1.), rad - 266.667 * r); // REMOVE THIS TO SEE THE FLARING\n\t// for glslsandbox pic-frame visibility... gigatron\n\tvec4 cfinal =  mix(vec4(col,1.0),vec4(0.0,0.0,.0,1.0),0.05);\n\t\n\tgl_FragColor = vec4(cfinal);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":31,"Metadata":{"ScriptingName":"gs_42256.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-524.77,350.0730000000001],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n    {\n\t\t\"NAME\": \"xP\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 2.0,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 5\n\t},\n\t{\n\t\t\"NAME\": \"yP\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 2.0,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 5\n\t},\n    {\n\t\t\"NAME\": \"speed\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 1.0,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 5\n\t},\n\t{\n\t\t\"NAME\": \"lineW\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 5.0,\n\t\t\"MIN\": 1.0,\n\t\t\"MAX\": 40.0\n\t},\n\t{\n\t\t\"NAME\": \"lineSmooth\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 0.00001,\n\t\t\"MIN\": 0.0000001,\n\t\t\"MAX\": 0.05\n\t}\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#42256.0\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\n\n#define DEBUG 1\n#define TAU 6.28318530718\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float k = clamp(dot(ap, ab)/dot(ab, ab), 0.0, 1.0);\n    return smoothstep(0.0, lineW/RENDERSIZE.y, length(ap - k*ab) - lineSmooth);\n}\n\nfloat shape(float u,vec2 p, float angle) {\n    float d = 100.0;\n    vec2 a = vec2(1.0, 0.0), b;\n    vec2 rot = vec2(cos(angle), sin(angle)*u);\n    \n    for (int i = 0; i < 6; ++i) {\n        b = a;\n        for (int j = 0; j < 18; ++j) {\n        \tb = vec2(b.x*rot.x - b.y*rot.y, b.x*rot.y + b.y*rot.x);\n        \td = min(d, segment(p,  a, b));\n        }\n        a = vec2(a.x*rot.x - a.y*rot.y, a.x*rot.y + a.y*rot.x);\n    }\n    return d;\n}\nvoid main(void)\n{\n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\n    vec2 cc = (-RENDERSIZE.xy + 2.0*gl_FragCoord.xy) / RENDERSIZE.y;\n        \n    float numPhases=1114.5;\nfloat u;\n    float t;\n    \n   u=0.005+(yP*2.2);\n    t = xP/RENDERSIZE.x * numPhases;\n\n    float col = shape(u,abs(cc), t+cos(0.01*(TIME*speed))*TAU);\n    col *= 0.5 + 1.5*pow(uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.3);\n    \n    \n\tgl_FragColor = vec4(vec3(pow(1.0-col, 2.15)),1.0);\n}\n","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"xP","Exposed":"xp","Value":{"Float":2.0},"Domain":{"Float":{"Min":0.0,"Max":5.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"yP","Exposed":"yp","Value":{"Float":2.0},"Domain":{"Float":{"Min":0.0,"Max":5.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"speed","Exposed":"speed","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":5.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"lineW","Exposed":"linew","Value":{"Float":5.0},"Domain":{"Float":{"Min":1.0,"Max":40.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"lineSmooth","Exposed":"linesmooth","Value":{"Float":0.000009999999747378752},"Domain":{"Float":{"Min":1.0000000116860974e-7,"Max":0.05000000074505806}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":30,"Metadata":{"ScriptingName":"gs_41554.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-532.77,296.0730000000001],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#41554.0\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\nvoid main( void ) {\n\n    vec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\n    uv -=.5;\n    uv.x*=RENDERSIZE.x/RENDERSIZE.y;\n    float c=1.;\n    for(int i=0;i<30;++i){\n        float y=.7-1.4*float(i)/30.+.1*sin(TIME+uv.x*10./(1.+exp(-.1*pow(abs(float(i)-15.),2.)))+float(i)*6.2832/4.)*exp(-5.*pow(length(uv),2.));\n        c=mix(c,1.-exp(-50.*(y-uv.y)),smoothstep(uv.y,uv.y+2./RENDERSIZE.y,y));\n    }\n\tgl_FragColor = vec4(c);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":29,"Metadata":{"ScriptingName":"gs_40287.6","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-338.77,-831.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#40287.6\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\n/****** CONFIG *************************************/\n\n/*\n * NOTICE:\n *   Set the scale drop down above to 2 or 1,\n *   and uncommen exactly one of these to match.\n */\n#define AASCALE 2\n//#define AASCALE 1\n\n/*\n * reduce this value if the\n * color spinnning is too hectic\n */\n#define COLOR_SPEED 0.8\n//#define COLOR_SPEED 0.6\n//#define COLOR_SPEED 0.3\n\n/*\n * \"What good is a disco ball if it's not spinning?\n *  Spin tht sonnavabitch!\"\n */\n//#define DO_ROTATE\n\n/***************************************************/\n\n#if (AASCALE == 2)\n# define SIZE (7.0)\n#else\n# if (AASCALE == 1)\n#  define SIZE (11.0)\n# else\n#  error AASCALE must equal 1 or 2\n# endif\n#endif\n\n\n#define TILECOUNT (SIZE * SIZE)\n\n#define TAU 6.283185307179586\n\n#define PX (vec2(1.0) / RENDERSIZE)\n#define nsin(x) ((sin(x) + 1.0) / 2.0)\n#define ncos(x) ((cos(x) + 1.0) / 2.0)\n\n\nvec2 tile_pos;\n\nvec2 rotate(in vec2 point, in float rads)\n{\n\tfloat cs = cos(rads);\n\tfloat sn = sin(rads);\n\treturn point * mat2(cs, -sn, sn, cs);\n}\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec2 v2, float sizemod){\n  vec3 v = vec3(v2/(9.0 + sizemod), TIME / 2.5333);\n\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 0.14 + 37.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main(void)\n{\n\n\tvec2 position = ((gl_FragCoord.xy / RENDERSIZE.xy ) * 2.0) - 1.0;\n\n\tposition.y *= RENDERSIZE.y/RENDERSIZE.x;\n\n#ifdef DO_ROTATE\n\tvec2 rposition = rotate(position, TIME/-11.0);\n\tvec2 tposition = rposition + vec2(cos(TIME / 13.0), sin(TIME/17.0));\n#else\n# define rposition position\n# define tposition position\n#endif\n\n\tvec3 c = vec3(0.0);\n\t\n\tvec2 position_size = tposition * SIZE; // rotate(tposition * S, TIME / 11.0);\n\n\ttile_pos = ceil(position_size);\n\n\tvec2 sw_pos = rotate(tile_pos, (TIME * 0.05) + tile_pos.x - tile_pos.y);\n\tvec2 secwave = 1.0 / abs(cos(((sw_pos * 0.15) + (TIME *1.5)) * 0.5 ));\n\tsecwave -= 1.0;\n\tsecwave = pow(secwave, vec2(0.36));\n\tsecwave *= 0.4;\n\n\tvec2 inner_pos = (fract(position_size) * 2.0) - 1.0;\n\tvec2 tile_px = PX * SIZE;\n\n\tvec2 ntscale = tile_pos;\n\tvec2 scale_r = vec2( 0.7,  1.2) * ntscale;\n\tvec2 scale_g = vec2( 1.3, -1.3) * ntscale.yx;\n\tvec2 scale_b = vec2(-1.2,  0.9) * ntscale;\n\n\n\tvec3 phase = vec3(snoise(scale_r, 3.37),\n\t\t\t  snoise(scale_g, 2.13),\n\t\t\t  snoise(scale_b, 5.751));\n\n\tvec2 border_size = abs(tile_px * 4.0);\n\tvec2 border_limit = 1.0 - border_size;\n\tvec2 aip = abs(inner_pos);\n\n\tfloat mag = max(phase.x, max(phase.y, phase.z));\n\t\n\tfloat sw = max(secwave.x, secwave.y);\n\t//float sw = secwave.x;\n\n\tmag = mix(mag, 1.0, sw);\n\n\tfloat corner_limit = sqrt(2.0) - 2.5 *length(border_size);\n\tif ((aip.x < border_limit.x) &&\n\t    (aip.y < border_limit.y) &&\n\t    (length(inner_pos) < corner_limit)) {\n\t\tc = vec3(phase.xzy);        \n\t\tc += mix(c, vec3(1.0), sw);\n\t\t\n\t\tfloat fadepow = mix(1.5, 3.0, mag);\n\t\tfloat fade = pow(length(aip), fadepow);\n\t\tvec3 cfade = mix(c, vec3(0.33 + (nsin(TIME*3.0 + length(tile_pos)) * 0.118)), 0.66);\n\t\tvec3 cnorm = mix(c, vec3(0.96), 0.37);\n\t\tc = mix(cnorm, cfade, fade);\n\t\tc = mix(vec3(0.03), c, mag);\n\t}\n\n\tgl_FragColor = vec4(c, 1.0);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":28,"Metadata":{"ScriptingName":"gs_39891.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[476.23,-1363.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#39891.0\"\n}\n*/\n\n\n\n// Author @kyndinfo - 2016\n// http://www.kynd.info\n// Title: Wipes\n\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define AQUA vec3(0.3, 1.0, 1.0)\n#define SUNFLOWER vec3(1.0, 1.0, 0.6)\n#define SWEETPEA vec3(1.0, 0.7, 0.75)\n#define NAVY vec3(0.0, 0.1, 0.2)\n#define TURQUOISE vec3(0.0, 1.0, 0.7)\n\n\nfloat easeInOutCubic(float t) {\n    if ((t *= 2.0) < 1.0) {\n        return 0.5 * t * t * t;\n    } else {\n        return 0.5 * ((t -= 2.0) * t * t + 2.0);\n    }\n}\n\nfloat linearstep(float begin, float end, float t) {\n    return clamp((t - begin) / (end - begin), 0.0, 1.0);\n}\n\nfloat clockWipe(vec2 p, float t) {\n    float a = atan(-p.x, -p.y);\n    float v = (t * TWO_PI > a + PI) ? 1.0 : 0.0;\n    return v;\n}\n\nfloat smoothedge(float v, float f) {\n    return smoothstep(0.0, f / RENDERSIZE.x, v);\n}\n\nfloat circle(vec2 p, float radius) {\n  return length(p) - radius;\n}\n\nfloat circlePlot(vec2 p, float radius) {\n  return 1.0 - smoothedge(circle(p, radius), 1.0);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy / RENDERSIZE.xy;\n    float t = mod(TIME, 4.0), v;\n\n    vec3 color = NAVY;\n    float v0 = 1.0 - step(easeInOutCubic(linearstep(0.0, 0.7, t)), st.x);\n    float v1 = 1.0 - step(easeInOutCubic(linearstep(0.3, 1.0, t)), st.x);\n    color = mix(color, TURQUOISE, v0 - v1);\n\n    float v2 = 1.0 - step(easeInOutCubic(linearstep(1.0, 1.7, t)), st.y);\n    float v3 = 1.0 - step(easeInOutCubic(linearstep(1.3, 2.0, t)), st.y);\n    color = mix(color, SUNFLOWER, v2 - v3);\n\n   \tfloat v4 = circlePlot(st - vec2(0.5), easeInOutCubic(linearstep(2.0, 2.7, t)));\n    float v5 = circlePlot(st - vec2(0.5), easeInOutCubic(linearstep(2.3, 3.0, t)));\n    color = mix(color, SWEETPEA, v4 - v5);\n\n   \tfloat v6 = clockWipe(st - vec2(0.5), easeInOutCubic(linearstep(3.0, 3.6, t)));\n    float v7 = clockWipe(st - vec2(0.5), easeInOutCubic(linearstep(3.4, 4.0, t)));\n    color = mix(color, AQUA, v6 - v7);\n\n    gl_FragColor = vec4(color, 1.0);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":27,"Metadata":{"ScriptingName":"gs_3989.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[500.23,-1441.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#3989.1\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nconst float pi=3.1415926535;\n\nvec2 clog(vec2 v)\n{\n\treturn vec2(0.5*log(v.x*v.x+v.y*v.y),atan(-v.y,v.x));\n}\n\nvec2 cdiv(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x+a.y*b.y,a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y);\n}\n\nvec4 checkerboard(vec2 pos)\n{\n\tfloat a=(fract(pos.x)-0.5)*(fract(pos.y)-0.5);\n\tif(a>0.0) return vec4(0.7,0.72,0.7,1.0);\n\telse return vec4(0.3,0.33,0.3,1.0);\n}\n\nvec4 grid(vec2 pos,float thickness)\n{\n\tvec2 a=abs(fract(pos)-0.5);\n\tif(a.x>thickness && a.y>thickness) return vec4(0.7,0.72,0.7,1.0);\n\telse return vec4(0.3,0.33,0.3,1.0);\n}\n\nvec4 wave(vec2 pos)\n{\n\tfloat a=fract(pos.x+0.5*sin(pos.y*1.0*pi));\n\tif(a>0.5) return vec4(0.7,0.72,0.7,1.0);\n\telse return vec4(0.3,0.33,0.3,1.0);\n}\n\nvec4 rainbow(vec2 pos)\n{\n\treturn vec4(sin(pos.x*2.0*pi)+1.0,sin(pos.x*2.0*pi+pi*1.0/3.0)+1.0,sin(pos.x*2.0*pi+pi*2.0/3.0)+1.0,1.0)*(sin(pos.y*8.0*pi)+1.0)*0.7;\n}\n\nvoid main()\n{\n\tvec2 position=2.0*((2.0*gl_FragCoord.xy-RENDERSIZE)/max(RENDERSIZE.x,RENDERSIZE.y));\n\n\tconst float p1=1.0;\n\tconst float p2=1.0;\n\tfloat u_corner=2.0*pi*p2;\n\tfloat v_corner=log(256.0)*p1;\n\tfloat diag=sqrt(u_corner*u_corner+v_corner*v_corner);\n\tfloat sin_a=v_corner/diag;\n\tfloat cos_a=u_corner/diag;\n\tfloat scale=diag/2.0/pi;\n\n\tfloat offset=0.7;\n\n\tvec2 p=clog(position+vec2(offset,0))\n\t\t-clog(position+vec2(-offset,0));\n\n\tvec2 rotated=vec2(p.x*cos_a-p.y*sin_a,\n\t\t          p.x*sin_a+p.y*cos_a);\n\tvec2 scaled=rotated*scale/vec2(log(256.0),2.0*pi);\n//\tvec2 scaled=p/vec2(log(256.0),2.0*pi);\n//\tvec2 translated=scaled-vec2(0.35+TIME*0.1,0.0);\n\tvec2 translated=scaled-vec2(TIME*0.1);\n\n\t\n//\tgl_FragColor=checkerboard(translated*2.0);\n//\tgl_FragColor=wave(translated*8.0+0.3);\n\tgl_FragColor=rainbow(translated);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":26,"Metadata":{"ScriptingName":"gs_3916.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-692.77,-1040.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\t{\r\n      \"NAME\": \"desaturation\",\r\n      \"TYPE\": \"float\",\r\n      \"MIN\": 0.0,\r\n      \"MAX\": 1,\r\n      \"DEFAULT\": 0.0\r\n    }\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#3916.0\"\n}\n*/\n\n\n// by rotwang\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nconst float PI = 3.1415926535;\nconst float TWOPI = PI*2.0;\n\n\n\n\t\n\t\nvec3 hsv2rgb(float h,float s,float v) {\n\treturn mix(vec3(1.),clamp((abs(fract(h+vec3(3.,2.,1.)/3.)*6.-3.)-1.),0.,1.),s)*v;\n}\n\nfloat ring( vec2 p )\n{\n\tfloat len = length(p)-0.55;\n\tlen *= length(p*p)-0.66;\n  \tfloat d = len*len*512.0;\n\n    return 1.0-d*d;\n}\n\n\nvec3 ring_clr( vec2 p )\n{\n\tfloat d = ring( p );\n\tfloat angle = (atan(p.x, p.y)+PI)/TWOPI;\n\tangle += .01 * sin(TIME);\n\tfloat hue = angle;\n\tfloat lum = d;\n\tvec3 clr = hsv2rgb(hue,0.66,lum + .1 * sin(TIME) );\n\n    return clr;\n}\n\nvec2 sincostime( vec2 p ){\n\tp.x=p.x+sin(p.x*2.0+TIME)*0.4-cos(p.y*1.0-TIME)*0.5-sin(p.x*3.0+TIME)*0.3+cos(p.y*3.0-TIME)*0.1;\n\tp.y=p.y+sin(p.x*5.0+TIME)*0.7+cos(p.y*8.0-TIME)*0.3+sin(p.x*4.0+TIME)*0.5-cos(p.y*6.0-TIME)*0.3;\n\treturn p;\n}\n\nvoid main(void)\n{\n\n\tvec2 unipos = (gl_FragCoord.xy / RENDERSIZE);\n\tvec2 pos = unipos*2.0-1.0;\n\tpos.x *= RENDERSIZE.x / RENDERSIZE.y;\n\n\tpos=sincostime(pos);\n\tvec3 clr = ring_clr(pos);\n\t\n\t\n\t\n\t\n\t\n\tvec3 grayXfer = vec3(0.3, 0.59, 0.11);\n\tvec3 gray = vec3(dot(grayXfer, clr));\n\t\t\n    \n  \n  \n    \n    \n    gl_FragColor = vec4(mix(clr, gray, desaturation), 1.);\n    \n\t\t\n}","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"desaturation","Exposed":"desaturation","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":25,"Metadata":{"ScriptingName":"gs_38710.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[557.23,-893.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n    {\n      \"NAME\" : \"mouse\",\n      \"TYPE\" : \"point2D\",\n      \"MAX\" : [\n        1,\n        1\n      ],\n      \"MIN\" : [\n        0,\n        0\n      ]\n    }\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#38710.0\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Posted by Trisomie21\n// modified by @hintz\n\n\nvoid main(void)\n{\n\tfloat scale = RENDERSIZE.y / 50.0;\n\tfloat ring = 20.0;\n\tfloat radius = RENDERSIZE.x*1.0;\n\tfloat gap = scale*.56;\n\tvec2 pos = gl_FragCoord.xy - RENDERSIZE.xy*.5;\n\t\n\tfloat d = length(pos);\n\t\n\t// Create the wiggle\n\td += mouse.x*(sin(pos.y*0.25/scale+TIME)*sin(pos.x*0.25/scale+TIME*.5))*scale*5.0;\n\t\n\t// Compute the distance to the closest ring\n\tfloat v = mod(d + radius/(ring*2.0), radius/ring);\n\tv = abs(v - radius/(ring*2.0));\n\t\n\tv = clamp(v-gap, 0.0, 1.0);\n\t\n\td /= radius;\n\tvec3 m = fract((d-1.0)*vec3(ring*-.5, -ring, ring*.25)*0.5);\n\t\n\tgl_FragColor = vec4(m*v, 1.0);\n}","Inlets":[{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"mouse","Exposed":"mouse","Value":{"Vec2f":[0.5,0.5]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[1.0,1.0],"Values":[[],[]]}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":24,"Metadata":{"ScriptingName":"gs_37007.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[790.23,-1262.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"GLSLSandbox\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#37007.0\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\nvoid main( void ) {\n\n\tvec2 position = gl_FragCoord.xy;\n\n\n\tvec4 finalColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\n\tfor (int i = 0; i < 10; i++) {\n\t\tfloat a = float(i)*3.14/5.;\n\t\tvec2 loc = 100.0*vec2(cos(a)*cos(TIME), sin(TIME)*sin(a)) + RENDERSIZE.xy/2.0;\n\t\n\t\tif(distance(position, loc) < 23.0+sin(TIME*1.0+a)*22.0){\n\t\t\tfinalColor += 0.5*vec4(.5, 0.0, .5, 1.0);\n\t\t}\n\t}\n\t\n\tgl_FragColor = finalColor;\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":23,"Metadata":{"ScriptingName":"gs_35499.2","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[464.23,-1572.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\"\n  ],\n  \"INPUTS\" : [\n\t{\n\t\t\t\"NAME\": \"saturation\",\n\t\t\t\"LABEL\": \"saturation\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.85,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t}\n\t\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#35499.2\"\n}\n*/\n\n\n//  Tried to make some more interesting colours, and use a little recursion, to make the \n//  patterns more intense.\n//  By @dennishjorth.\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n#define MAX_ITER 10\n\nfloat rand( float n )\n{\n    return fract(n);\n}\nvoid main( void ) {\n\tvec2 sp = vv_FragNormCoord;//vec2(.4, .7);\n\tvec2 p = sp*6.0 - vec2(125.0);\n\tvec2 i = p;\n\tfloat c = 1.0;\n\tfloat cc = rand(1.);\n\tint ccc = int(cc);\n\tfloat rc = 0.0;\n\t\n\tfloat inten = 0.0095;\n\t\n\t\tfor (int n = 0; n < MAX_ITER; n++) \n\t\t{\n\t\t\tfloat t = TIME* (0.05 - (0.75 / float(n+1)));\n\t\t\ti = p + vec2(rc*0.4+sin(i.x+TIME*0.24+cos(i.y+sin(cos(t - i.x) + sin(t + i.y))+TIME*0.35)), \n\t\t\t\t     rc*0.4+sin(i.y+TIME*0.23+cos(i.x+cos(sin(t - i.y) + cos(t + i.x))+TIME*0.26)));\n\t\t\tc += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n\t\t\trc = c+rc*0.9;\n\t\t}\n\t\t\tc /= float(MAX_ITER);\n\t\t\tc = 1.5-sqrt(c);\n\t\tfloat cb = pow(c,25.0);\n\t        float cr = cb;\n\t        float cg = cr;\n\t        \n\t        \n\t        vec3 f = vec3(cr*1.5,cg,cb*5.0);\n\t        \n\t      \tf=mix(vec3(length(f)),f,saturation);\n\t       \n\t\t//gl_FragColor = vec4(cr*1.5,cg,cb*5.0,1.0);\n\t\t\n\t\t\n\t\t\tgl_FragColor = vec4(f,1.);\n\t\n} ","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"saturation","Exposed":"saturation","Value":{"Float":0.8500000238418579},"Domain":{"Float":{"Min":0.0,"Max":1.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":22,"Metadata":{"ScriptingName":"HypnoSwirl","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[285.23,-1682.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\" : \"HypnoSwirl by Scottapotamas\",\n\t\"CATEGORIES\" : [\n\t\t\"ci\"\n\t],\n\t\"DESCRIPTION\": \"\",\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\" : \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"iSteps\",\n\t\t\t\"TYPE\" : \"float\",\n\t\t\t\"MIN\" : 2.0,\n\t\t\t\"MAX\" : 75.0,\n\t\t\t\"DEFAULT\" : 19.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\" :\"iMouse\",\n\t\t\t\"TYPE\" : \"point2D\",\n\t\t\t\"DEFAULT\" : [0.0, 0.0],\n\t\t\t\"MAX\" : [640.0, 480.0],\n\t\t\t\"MIN\" : [0.0, 0.0]\n\t\t}\n,\n\t\t{\n\t\t\t\"NAME\": \"iColor\", \n\t\t\t\"TYPE\" : \"color\", \n\t\t\t\"DEFAULT\" : [\n\t\t\t\t0.9, \n\t\t\t\t0.6, \n\t\t\t\t0.0, \n\t\t\t\t1.0\n\t\t\t]\n\t\t}\n,\n\t\t{\n\t\t\t\"NAME\": \"iZoom\", \n\t\t\t\"TYPE\" : \"float\", \n\t\t\t\"MIN\" : -3,\n\t\t\t\"MAX\" : 3,\n\t\t\t\"DEFAULT\" : 1\n\t\t}\n\t]\n}\n*/\n// https://www.shadertoy.com/view/4ds3WH\n\n#define halfPhase 3.5\n#define speed_modifier 1.5\n\nvoid main(void) {\n\tvec2 p = -1.0 +  iZoom * 2.0 * gl_FragCoord.xy / RENDERSIZE.xy; \n\tp.x -= 0.0;\n\tp.y -= 0.0;\n\n\tfloat activeTime = TIME * speed_modifier;\n\tvec3 col; \n\tfloat timeMorph = 0.0;\n\t\n\tp *= 7.0;\n\t\n\tfloat a = atan(p.y,p.x);\n\tfloat r = sqrt(dot(p,p));\n\t\n\tif(mod(activeTime, 2.0 * halfPhase) < halfPhase)\n\t\ttimeMorph = mod(activeTime, halfPhase);\n\telse\n\t\ttimeMorph = (halfPhase - mod(activeTime, halfPhase));\t\n\t\t\n\ttimeMorph = 2.0*timeMorph + 1.0;\n\t\n\tfloat w = 0.25 + 3.0*(sin(activeTime + 1.0*r)+ 3.0*cos(activeTime + 5.0*a)/timeMorph);\n\tfloat x = 0.8 + 3.0*(sin(activeTime + 1.0*r)+ 3.0*cos(activeTime + 5.0*a)/timeMorph);\n\t\n\tcol = vec3(iColor.r,iColor.g,iColor.b)*1.1;\n\n\tgl_FragColor = vec4(col*w*x,1.0);\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"iSteps","Exposed":"isteps","Value":{"Float":19.0},"Domain":{"Float":{"Min":2.0,"Max":75.0}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"iMouse","Exposed":"imouse","Value":{"Vec2f":[0.0,0.0]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[640.0,480.0],"Values":[[],[]]}}},{"uuid":"8f38638e-9f9f-48b0-ae36-1cba86ef5703","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"iColor","Exposed":"icolor","Value":{"Vec4f":[0.8999999761581421,0.6000000238418579,0.0,1.0]},"Domain":{}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"iZoom","Exposed":"izoom","Value":{"Float":1.0},"Domain":{"Float":{"Min":-3.0,"Max":3.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":21,"Metadata":{"ScriptingName":"BinarySerpents","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[304.23,-1317.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n  \"CREDIT\": \"BinarySerpents by Trisomie21\",\n  \"CATEGORIES\": [\"ci\"],\n  \"DESCRIPTION\": \"https://www.shadertoy.com/view/MslGRH\",\n  \"INPUTS\": [\n    {\n      \"NAME\": \"iChannel0\",\n      \"TYPE\": \"image\"\n    },\n    {\n      \"NAME\": \"iZoom\",\n      \"TYPE\": \"float\",\n      \"MIN\": 0.0,\n      \"MAX\": 1.0,\n      \"DEFAULT\": 1.0\n    },\n    {\n      \"NAME\": \"iMouse\",\n      \"TYPE\": \"point2D\",\n      \"DEFAULT\": [0.0, 0.0],\n      \"MAX\": [640.0, 480.0],\n      \"MIN\": [0.0, 0.0]\n    },\n    {\n      \"NAME\": \"iColor\",\n      \"TYPE\": \"color\",\n      \"DEFAULT\": [0.0, 1.0, 0.0, 1.0]\n    }\n  ]\n}\n*/\n// https://www.shadertoy.com/view/MslGRH\n\n// With tweaks by PauloFalcao\n\nfloat BinarySerpentsTexture3D(vec3 n, float res){\n  n = floor(n*res+.5);\n  return fract(sin((n.x+n.y*1e5+n.z*1e7)*1e-4)*1e5);\n}\n\nfloat BinarySerpentsmap( vec3 p ){\n    p.x+=sin(p.z*4.0+TIME*4.0)*0.1*cos(TIME*0.1);\n    p = mod(p,vec3(1.0, 1.0, 1.0))-0.5;\n    return length(p.xy)-.1;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n   vec2 uv = iZoom * fragCoord.xy/RENDERSIZE.xy * 2.0 - 0.5;\n  \t vec3 camPos = vec3(cos(TIME*0.3), sin(TIME*0.3), 1.5);\n    vec3 camTarget = vec3(0.0, 0.0, 0.0);\n\n    vec3 camDir = normalize(camTarget-camPos);\n    vec3 camUp  = normalize(vec3(0.0, 1.0, 0.0));\n    vec3 camSide = cross(camDir, camUp);\n    float focus = 2.0;\n\n    vec3 rayDir = normalize(camSide*uv.x + camUp*uv.y + camDir*focus);\n    vec3 ray = camPos;\n    float d = 0.0, total_d = 0.0;\n    const int MAX_MARCH = 100;\n    const float MAX_DISTANCE = 5.0;\n    float c = 1.0;\n    for(int i=0; i<MAX_MARCH; ++i) {\n        d = BinarySerpentsmap(ray);\n        total_d += d;\n        ray += rayDir * d;\n        if(abs(d)<0.001) { break; }\n        if(total_d>MAX_DISTANCE) { c = 0.; total_d=MAX_DISTANCE; break; }\n    }\n\t\n    float fog = 3.1;\n    vec3 result = vec3( vec3(iColor.r, iColor.g, iColor.b) * (fog - total_d) / fog );\n\n    ray.z -= 5.+TIME*.5;\n    float r = BinarySerpentsTexture3D(ray, 33.);\n\n  fragColor = vec4(result*(step(r,.3)+r*.2+.1),1.0);\n}\n\n\nvoid main(void) { mainImage(gl_FragColor, gl_FragCoord.xy); }","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"iZoom","Exposed":"izoom","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"iMouse","Exposed":"imouse","Value":{"Vec2f":[0.0,0.0]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[640.0,480.0],"Values":[[],[]]}}},{"uuid":"8f38638e-9f9f-48b0-ae36-1cba86ef5703","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"iColor","Exposed":"icolor","Value":{"Vec4f":[0.0,1.0,0.0,1.0]},"Domain":{}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":19,"Metadata":{"ScriptingName":"52.40","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-114.76999999999998,-1290.927],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"Automatically Converted\",\n        \"Shadertoy\"\n    ],\n    \"DESCRIPTION\": \"\",\n    \"IMPORTED\": {\n    },\n    \"INPUTS\": [\n        {\n            \"DEFAULT\": [\n                0.3,\n                0.15,\n                0.1,\n                1\n            ],\n            \"LABEL\": \"Color A\",\n            \"NAME\": \"colorA\",\n            \"TYPE\": \"color\"\n        },\n        {\n            \"DEFAULT\": [\n                0.1,\n                0.05,\n                0,\n                1\n            ],\n            \"LABEL\": \"Color B\",\n            \"NAME\": \"colorB\",\n            \"TYPE\": \"color\"\n        },\n        {\n            \"DEFAULT\": 3,\n            \"LABEL\": \"Depth Brightness\",\n            \"MAX\": 8,\n            \"MIN\": 2,\n            \"NAME\": \"dBright\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": [\n                0,\n                0\n            ],\n            \"LABEL\": \"dXY\",\n            \"MAX\": [\n                1,\n                1\n            ],\n            \"MIN\": [\n                -1,\n                -1\n            ],\n            \"NAME\": \"dXY\",\n            \"TYPE\": \"point2D\"\n        },\n        {\n            \"DEFAULT\": 0,\n            \"LABEL\": \"rotation\",\n            \"MAX\": 3.6,\n            \"MIN\": -3.6,\n            \"NAME\": \"rotation\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 5,\n            \"LABEL\": \"zRate\",\n            \"MAX\": 10,\n            \"MIN\": 0,\n            \"NAME\": \"zRate\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 0.8,\n            \"LABEL\": \"lDiff\",\n            \"MAX\": 1,\n            \"MIN\": 0.1,\n            \"NAME\": \"lDiff\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 0,\n            \"LABEL\": \"xAmp\",\n            \"MAX\": 3,\n            \"MIN\": -3,\n            \"NAME\": \"xAmp\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 3,\n            \"LABEL\": \"pAmp\",\n            \"MAX\": 10,\n            \"MIN\": 0.5,\n            \"NAME\": \"pAmp\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 0.2,\n            \"LABEL\": \"xyAmp\",\n            \"MAX\": 1,\n            \"MIN\": 0.1,\n            \"NAME\": \"xyAmp\",\n            \"TYPE\": \"float\"\n        },\n        {\n            \"DEFAULT\": 64,\n            \"LABEL\": \"iterations\",\n            \"MAX\": 128,\n            \"MIN\": 1,\n            \"NAME\": \"iterations\",\n            \"TYPE\": \"float\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\nmat2 rotate(float a) {\n    float s=sin(a); \n    float c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat m(vec3 p) \n{ \n\tp.z += zRate * TIME; \n    p.xy += dXY;\n    p.xy *= rotate(rotation);\n    // return length(.2 * sin(p.x - p.y) + cos(p / 3.)) - .8;\n    return length(xyAmp * sin(p.x - p.y) + cos(p / pAmp) - .1 * sin(xAmp * p.x)) - lDiff;\n \n}\n\nvoid main() {\n    vec3 d = .5 - vec3(gl_FragCoord.xy, 0) / RENDERSIZE.x;\n    d.xy += dXY;\n    d.xy *= rotate(rotation);\n    vec3 o = d;\n\n    for(int i = 0; i < int(iterations); i++) {\n        o += m(o) * d;\n    }\n\n    vec3 cA = m(o + d) * vec3(colorA);\n    vec3 cB = m(o * .5) * vec3(colorB);\n    vec3 c = abs(clamp(cA, 0., 1.) + clamp(cB, 0., 1.));\n    c *= (dBright * 4. - o.z / dBright);\n\n    gl_FragColor = vec4(c, 1);\n}\n","Inlets":[{"uuid":"8f38638e-9f9f-48b0-ae36-1cba86ef5703","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"colorA","Exposed":"colora","Value":{"Vec4f":[0.30000001192092896,0.15000000596046448,0.10000000149011612,1.0]},"Domain":{}},{"uuid":"8f38638e-9f9f-48b0-ae36-1cba86ef5703","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"colorB","Exposed":"colorb","Value":{"Vec4f":[0.10000000149011612,0.05000000074505806,0.0,1.0]},"Domain":{}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"dBright","Exposed":"dbright","Value":{"Float":3.0},"Domain":{"Float":{"Min":2.0,"Max":8.0}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"dXY","Exposed":"dxy","Value":{"Vec2f":[0.0,0.0]},"Domain":{"Vec2f":{"Min":[-1.0,-1.0],"Max":[1.0,1.0],"Values":[[],[]]}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"rotation","Exposed":"rotation","Value":{"Float":0.0},"Domain":{"Float":{"Min":-3.5999999046325684,"Max":3.5999999046325684}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"zRate","Exposed":"zrate","Value":{"Float":5.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"lDiff","Exposed":"ldiff","Value":{"Float":0.800000011920929},"Domain":{"Float":{"Min":0.10000000149011612,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":7,"Hidden":true,"Custom":"xAmp","Exposed":"xamp","Value":{"Float":0.0},"Domain":{"Float":{"Min":-3.0,"Max":3.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"pAmp","Exposed":"pamp","Value":{"Float":3.0},"Domain":{"Float":{"Min":0.5,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"xyAmp","Exposed":"xyamp","Value":{"Float":0.20000000298023224},"Domain":{"Float":{"Min":0.10000000149011612,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"iterations","Exposed":"iterations","Value":{"Float":64.0},"Domain":{"Float":{"Min":1.0,"Max":128.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":18,"Metadata":{"ScriptingName":"gs_34956.0","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-638.77,-696.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"CATEGORIES\" : [\n    \"Automatically Converted\"\n  ],\n  \"INPUTS\" : [\n\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from http:\\/\\/glslsandbox.com\\/e#34956.0\"\n}\n*/\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\n\n//JESSE HARLAN\n//cell noise with fast math\n//free license to use and modify\n\nfloat ha( float n ) {return fract(sin(n)*713.5354);}\n\n// Modulo 289 without no division complications\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n// Modulo 7 without no division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nvec3 permute(vec3 x) {\n  return mod289((27.0 * x + 1.0) * x);\n}\n\n\nvec2 cellular(vec3 P) {\n#define K 0.142857142857 // 1/7\n#define Ko 0.428571428571 // 1/2-K/2\n#define K2 0.020408163265306 // 1/(7*7)\n#define Kz 0.166666666667 // 1/6\n#define Kzo 0.416666666667 // 1/2-1/6*2\n#define jitter 1.0 \n\n\tvec3 Pi = mod289(floor(P));\n \tvec3 Pf = fract(P) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n\tvec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n\tvec3 p1 = permute(p + Pi.y - 1.0);\n\tvec3 p2 = permute(p + Pi.y);\n\tvec3 p3 = permute(p + Pi.y + 1.0);\n\n\tvec3 p11 = permute(p1 + Pi.z - 1.0);\n\tvec3 p12 = permute(p1 + Pi.z);\n\tvec3 p13 = permute(p1 + Pi.z + 1.0);\n\n\tvec3 p21 = permute(p2 + Pi.z - 1.0);\n\tvec3 p22 = permute(p2 + Pi.z);\n\tvec3 p23 = permute(p2 + Pi.z + 1.0);\n\n\tvec3 p31 = permute(p3 + Pi.z - 1.0);\n\tvec3 p32 = permute(p3 + Pi.z);\n\tvec3 p33 = permute(p3 + Pi.z + 1.0);\n\n\tvec3 ox11 = fract(p11*K) - Ko;\n\tvec3 oy11 = mod7(floor(p11*K))*K - Ko;\n\tvec3 oz11 = floor(p11*K2)*Kz - Kzo; \n\n\tvec3 ox12 = fract(p12*K) - Ko;\n\tvec3 oy12 = mod7(floor(p12*K))*K - Ko;\n\tvec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n\tvec3 ox13 = fract(p13*K) - Ko;\n\tvec3 oy13 = mod7(floor(p13*K))*K - Ko;\n\tvec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n\tvec3 ox21 = fract(p21*K) - Ko;\n\tvec3 oy21 = mod7(floor(p21*K))*K - Ko;\n\tvec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n\tvec3 ox22 = fract(p22*K) - Ko;\n\tvec3 oy22 = mod7(floor(p22*K))*K - Ko;\n\tvec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n\tvec3 ox23 = fract(p23*K) - Ko;\n\tvec3 oy23 = mod7(floor(p23*K))*K - Ko;\n\tvec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n\tvec3 ox31 = fract(p31*K) - Ko;\n\tvec3 oy31 = mod7(floor(p31*K))*K - Ko;\n\tvec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n\tvec3 ox32 = fract(p32*K) - Ko;\n\tvec3 oy32 = mod7(floor(p32*K))*K - Ko;\n\tvec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n\tvec3 ox33 = fract(p33*K) - Ko;\n\tvec3 oy33 = mod7(floor(p33*K))*K - Ko;\n\tvec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter*ox11;\n\tvec3 dy11 = Pfy.x + jitter*oy11;\n\tvec3 dz11 = Pfz.x + jitter*oz11;\n\n\tvec3 dx12 = Pfx + jitter*ox12;\n\tvec3 dy12 = Pfy.x + jitter*oy12;\n\tvec3 dz12 = Pfz.y + jitter*oz12;\n\n\tvec3 dx13 = Pfx + jitter*ox13;\n\tvec3 dy13 = Pfy.x + jitter*oy13;\n\tvec3 dz13 = Pfz.z + jitter*oz13;\n\n\tvec3 dx21 = Pfx + jitter*ox21;\n\tvec3 dy21 = Pfy.y + jitter*oy21;\n\tvec3 dz21 = Pfz.x + jitter*oz21;\n\n\tvec3 dx22 = Pfx + jitter*ox22;\n\tvec3 dy22 = Pfy.y + jitter*oy22;\n\tvec3 dz22 = Pfz.y + jitter*oz22;\n\n\tvec3 dx23 = Pfx + jitter*ox23;\n\tvec3 dy23 = Pfy.y + jitter*oy23;\n\tvec3 dz23 = Pfz.z + jitter*oz23;\n\n\tvec3 dx31 = Pfx + jitter*ox31;\n\tvec3 dy31 = Pfy.z + jitter*oy31;\n\tvec3 dz31 = Pfz.x + jitter*oz31;\n\n\tvec3 dx32 = Pfx + jitter*ox32;\n\tvec3 dy32 = Pfy.z + jitter*oy32;\n\tvec3 dz32 = Pfz.y + jitter*oz32;\n\n\tvec3 dx33 = Pfx + jitter*ox33;\n\tvec3 dy33 = Pfy.z + jitter*oy33;\n\tvec3 dz33 = Pfz.z + jitter*oz33;\n\n\tvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n\tvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n\tvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n\tvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n\tvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n\tvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n\tvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n\tvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n\tvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t\n\tvec3 d1a = min(d11, d12);\n\td12 = max(d11, d12);\n\td11 = min(d1a, d13); \n\td13 = max(d1a, d13);\n\td12 = min(d12, d13);\n\tvec3 d2a = min(d21, d22);\n\td22 = max(d21, d22);\n\td21 = min(d2a, d23); \n\td23 = max(d2a, d23);\n\td22 = min(d22, d23);\n\tvec3 d3a = min(d31, d32);\n\td32 = max(d31, d32);\n\td31 = min(d3a, d33); \n\td33 = max(d3a, d33);\n\td32 = min(d32, d33); \n\tvec3 da = min(d11, d21);\n\td21 = max(d11, d21);\n\td11 = min(da, d31); \n\td31 = max(da, d31); \n\td11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n\td11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;\n\td12 = min(d12, d21);\n\td12 = min(d12, d22);\n\td12 = min(d12, d31);\n\td12 = min(d12, d32);\n\td11.yz = min(d11.yz,d12.xy); \n\td11.y = min(d11.y,d12.z); \n\td11.y = min(d11.y,d11.z); \n\treturn sqrt(d11.xy); \n\n}\nfloat no( in vec3 x )\n{    \n\tvec3 p = floor(x);    \n\tvec3 f = fract(x); \n\tfloat n = p.x + p.y*57.0 + p.z*800.0;\n\tfloat res = mix(mix(mix( ha(n+  0.0), ha(n+  1.0),f.x), mix( ha(n+ 57.0), ha(n+ 58.0),f.x),f.y),\n\t\t\tmix(mix( ha(n+800.0), ha(n+801.0),f.x), mix( ha(n+857.0), ha(n+858.0),f.x),f.y),f.z);\n\treturn res;\n}\n\nfloat fb(vec3 p)\n{\n\tfloat v = 0.0;\n\tfloat w = 0.0;\n\tfloat a = 1.0;\n\tfor(int i=0;i<5;i++)\n\t{\n\t\tv += a * (cellular(p).x * 0.5 + 0.5);\n\t\tw += a;\n\t\tp *= 3.0;\n\t\ta *= 0.7;\n\t}\n\treturn smoothstep(0.1, 1.0, v / w);\n}\n\nfloat whacky(vec3 p)\n{\n\tfloat v = 0.1;\n\tfloat w = 0.0;\n\tfloat a = 1.0;\n\tfor(int i=0;i<3;i++){\n\t\tfloat x = pow(cellular(p).x, 3.14);\n\t\tv += a * x ;\n\t\tw += a;\n\t\tp.xy *= 3.0;\n\t\tp.z *= 1.2;\n\t\ta *= 0.8;\n\t}\n\treturn smoothstep(0.1, 1.0, pow(v / w *3.9, 4.0));\t\t\n}\n\nvoid main( void )\n{\n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\n\tuv.x *= RENDERSIZE.x/RENDERSIZE.y;\n\tuv *= 1.0;\n\t\n\tgl_FragColor = vec4(whacky(vec3(uv, TIME*0.2)));\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":17,"Metadata":{"ScriptingName":"Ether_MsjSW3","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[787.23,-281.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"3d\",\n    \"fast\",\n    \"cheap\",\n    \"short\",\n    \"Automatically Converted\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/MsjSW3 by nimitz.  A wild distance field in its natural habitat.\",\n  \"INPUTS\" : [\n  \t{\n\t\t\"NAME\": \"speed\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 1,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 10\n\t},\n\t{\n\t\t\"NAME\": \"TL\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 0,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 6.3\n\t},\n\t{\n\t\t\"NAME\": \"itCount\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 5,\n\t\t\"MIN\": 2,\n\t\t\"MAX\": 9\n\t},\n\t{\n\t\t\"NAME\": \"camZ\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 5.0,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 5\n\t},\n\t{\n\t\t\"NAME\": \"mapAmp\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 0.7,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 2.0\n\t},\n\t{\n\t\t\"NAME\": \"mapMutate\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 0.5,\n\t\t\"MIN\": 0,\n\t\t\"MAX\": 3.0\n\t},\n\t{\n\t\t\"NAME\": \"mapSize\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 1.0,\n\t\t\"MIN\": -2,\n\t\t\"MAX\": 4.0\n\t},\n\t{\n\t\t\"NAME\": \"mapQ\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 2.0,\n\t\t\"MIN\": -0.02,\n\t\t\"MAX\": 4.0\n\t},\n\t{\n\t\t\"NAME\": \"mapX\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 0.4,\n\t\t\"MIN\": -0.4,\n\t\t\"MAX\": 0.8\n\t},\n\t{\n\t\t\"NAME\": \"mapY\",\n\t\t\"TYPE\": \"float\",\n\t\t\"DEFAULT\": 0.3,\n\t\t\"MIN\": -0.3,\n\t\t\"MAX\": 0.6\n\t},\n\t{\r\n      \"NAME\": \"desaturation\",\r\n      \"TYPE\": \"float\",\r\n      \"MIN\": 0.0,\r\n      \"MAX\": 1,\r\n      \"DEFAULT\": 0.0\r\n    }\n\n  ]\n}\n*/\n\n\n\t\t\n\n//Ether by nimitz (twitter: @stormoid)\n\n\nmat2 m(float a){float c=cos(a), s=sin(a);return mat2(c,-s,s,c);}\nfloat map(vec3 p){\n    p.xz*= m(((TIME*speed)+TL)*mapX);\n    p.xy*= m(((TIME*speed)+TL)*mapY);\n    vec3 q = p*mapQ+((TIME*speed)+TL);\n    return length(p+vec3(sin(((TIME*speed)+TL)*mapAmp)))*log(length(p)+mapSize) + sin(q.x+sin(q.z+sin(q.y)))*mapMutate - 1.;\n}\n\nvoid main(){\t\n\tvec2 p = gl_FragCoord.xy/RENDERSIZE.y - vec2(.9,.5);\n    vec3 cl = vec3(0.);\n    float d = 2.5;\n    for(int i=0; i<=int(itCount); i++)\t{\n\t\tvec3 p = vec3(0,0,camZ) + normalize(vec3(p, -1.))*d;\n        float rz = map(p);\n\t\tfloat f =  clamp((rz - map(p+.1))*0.5, -.1, 1. );\n        vec3 l = vec3(0.1,0.3,.4) + vec3(5., 2.5, 3.)*f;\n        cl = cl*l + (1.-smoothstep(0., 2.5, rz))*.7*l;\n\t\td += min(rz, 1.);\n\t}\n\t\n\t\n\t\n\tvec3 grayXfer = vec3(0.3, 0.59, 0.11);\n\tvec3 gray = vec3(dot(grayXfer, cl));\n\t\t\n    \n  \n  \n    \n    \n    gl_FragColor = vec4(mix(cl, gray, desaturation), 1.);\n}","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"speed","Exposed":"speed","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"TL","Exposed":"tl","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":6.300000190734863}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"itCount","Exposed":"itcount","Value":{"Float":5.0},"Domain":{"Float":{"Min":2.0,"Max":9.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"camZ","Exposed":"camz","Value":{"Float":5.0},"Domain":{"Float":{"Min":0.0,"Max":5.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"mapAmp","Exposed":"mapamp","Value":{"Float":0.699999988079071},"Domain":{"Float":{"Min":0.0,"Max":2.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"mapMutate","Exposed":"mapmutate","Value":{"Float":0.5},"Domain":{"Float":{"Min":0.0,"Max":3.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"mapSize","Exposed":"mapsize","Value":{"Float":1.0},"Domain":{"Float":{"Min":-2.0,"Max":4.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":7,"Hidden":true,"Custom":"mapQ","Exposed":"mapq","Value":{"Float":2.0},"Domain":{"Float":{"Min":-0.019999999552965164,"Max":4.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"mapX","Exposed":"mapx","Value":{"Float":0.4000000059604645},"Domain":{"Float":{"Min":-0.4000000059604645,"Max":0.800000011920929}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"mapY","Exposed":"mapy","Value":{"Float":0.30000001192092896},"Domain":{"Float":{"Min":-0.30000001192092896,"Max":0.6000000238418579}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"desaturation","Exposed":"desaturation","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":16,"Metadata":{"ScriptingName":"Epilepsy_XtVGDy","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-1147.77,-225.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"noob\",\n    \"Automatically Converted\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/XtVGDy by hasnmrtn.   i made a thing!\",\n  \"INPUTS\" : [\n\t{\n\t\t\t\"NAME\": \"amp\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": -1.0,\n\t\t\t\"MAX\": 2.1,\n\t\t\t\"DEFAULT\": 1.02\n\t},\n\t{\n\t\t\t\"NAME\": \"ampTrace\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": -1.0,\n\t\t\t\"MAX\": 2.1,\n\t\t\t\"DEFAULT\": 1.02\n\t}\n\n  ]\n}\n*/\n\n\nfloat map( vec3 p )\n{\n    //float amp = 1.0;//texture2D( iChannel2, vec2( 0.01, 0.002 ) ).x * 1.0;\n    vec3 q = fract( p ) * 2.0 - 1.0;\n    return length( q ) - 0.7;\n}\n\nfloat trace (vec3 o, vec3 r)\n{\n    //float amp = 1.6324;//texture2D( iChannel2, vec2( 0.1, 0.0 ) ).x * 2.0;\n    float t = 0.0;\n    for ( int i = 0; i < 158; ++i ) {\n        vec3 p = o + r *( 2.3 * ampTrace );\n        float d = map( p );\n        t += d * 0.5;\n         }\n         return t;\n        \n}\nvoid main()\n{\n\t\n    vec2 R = RENDERSIZE.xy;\n    \n    vec2 uv = gl_FragCoord.xy / R;\n   \n    uv = (2.0 * gl_FragCoord.xy - R) / R.y; \n    \n    uv.x *= R.x / R.y; \n    \n    vec3 r = normalize( vec3 ( uv, 1.0 ) ); \n    \n    float the = TIME * 0.2;\n    \n    r.xz *= mat2( cos( the ), -sin( the ), sin( the ), cos( the ) );\n    \n    vec3 o = vec3( 0.0, 0.0, TIME );\n    \n    float t = trace( o, r ); \n    \n    float fog = 3.0 / ( 1.0 + t * t * 0.1 );\n    \n    vec3 fc = vec3( fog );\n    \n    gl_FragColor = vec4( fc, 1.0 );\n}","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"amp","Exposed":"amp","Value":{"Float":1.0199999809265137},"Domain":{"Float":{"Min":-1.0,"Max":2.0999999046325684}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"ampTrace","Exposed":"amptrace","Value":{"Float":1.0199999809265137},"Domain":{"Float":{"Min":-1.0,"Max":2.0999999046325684}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":15,"Metadata":{"ScriptingName":"electro bands","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[246.23000000000002,355.0730000000001],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by echophons\",\n\t\"DESCRIPTION\": \"electro bands\",\n\t\"CATEGORIES\": [ \"generator\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"radius\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 0.1,\n\t\t\t\"DEFAULT\": 0.02\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"amp\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 30.0,\n\t\t\t\"DEFAULT\": 11.54\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"band\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": -1.0,\n\t\t\t\"MAX\": 1.0,\n\t\t\t\"DEFAULT\": 0.75\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"speed\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0,\n\t\t\t\"DEFAULT\": 0.33\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"thickness\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 10.0,\n\t\t\t\"DEFAULT\": 1.05\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"size\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 100.0,\n\t\t\t\"DEFAULT\": 47.5\n\t\t}\n\t]\n}*/\n\n//\n// a very \"I'm still learning\" edit of \n// electro-prim's by @AlexWDunn\n// https://www.shadertoy.com/view/Mll3WS\n\nvec3   iResolution = vec3(RENDERSIZE, 1.0);\nfloat  iGlobalTime = TIME;\n\n\n\n#define PI (3.1416)\n\nfloat electro(vec2 pos, float d, float f, float o, float s, float a, float b)\n{\n    float ti = iGlobalTime * s * 0.5;\n    \n    float theta = atan(pos.y,pos.x);\n    \n    float amp = smoothstep(0.0, 1.0, (sin(theta+iGlobalTime*2.0)*0.5+0.5)-b)*a;\n    float phase = d - sin(theta * f + o + ti *1.5) * amp*2.5;\n    \n    return sin(clamp(phase, 0.0, PI*size) + PI/size) + 0.9999999;\n}\n\nfloat circle(vec2 pos, float r, float a, float o, float s, float f, float b, float t)\n{\n    float d = length(pos); \n    return 1.0 - smoothstep(0.0, t, electro(pos, d/r, f, o, s, a, b));\n}\n\nfloat shape(vec2 pos, float r, float a, float o, float s, float f, float b, float t)\n{\n    float ci = circle(pos+vec2(0.0,-0.20),r,a,o,s,f,b,t);\n    return ci;\n}\n\nvoid main() \n{\n   //const float radius = 0.00950;\n   //const float amp = 40.0; \n   const float freq = 4.0;\n   //const float band = 0.175;\n   //const float speed = 0.001;\n   //const float thickness = 4.0;\n    \n   vec2 pos = gl_FragCoord.xy / max(iResolution.x, iResolution.y) * vec2(2.0) - vec2(1.0);\n   pos -= vec2(0.0, -0.5);\n    \n    \n   vec3 color = vec3(0.0);\n   color.r = shape(pos, radius, amp, 0.0 *PI, speed*0.01, freq, band, thickness);\n   color.g = shape(pos, radius, amp, 0.1 *PI, speed*0.02,   freq, band, thickness);\n   color.b = shape(pos, radius, amp, 0.2 *PI, speed*0.03, freq, band, thickness);\n\n   gl_FragColor = vec4(color,1.0);\n}","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"radius","Exposed":"radius","Value":{"Float":0.019999999552965164},"Domain":{"Float":{"Min":0.0,"Max":0.10000000149011612}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"amp","Exposed":"amp","Value":{"Float":11.539999961853027},"Domain":{"Float":{"Min":0.0,"Max":30.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"band","Exposed":"band","Value":{"Float":0.75},"Domain":{"Float":{"Min":-1.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"speed","Exposed":"speed","Value":{"Float":0.33000001311302185},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"thickness","Exposed":"thickness","Value":{"Float":1.0499999523162842},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"size","Exposed":"size","Value":{"Float":47.5},"Domain":{"Float":{"Min":0.0,"Max":100.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":14,"Metadata":{"ScriptingName":"driver_XdKBWV","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[286.23,295.0730000000001],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"Shadertoy\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/XdKBWV by lennyjpg.  fsdgdfgsf\",\n  \"INPUTS\" : [\n\n  ]\n}\n*/\n\n\nvoid main() {\n\n\n\n    vec2 uv = gl_FragCoord.xy/RENDERSIZE.y - 0.5;\n    float p = length(uv)*2.0;\n    float a = uv.y+uv.x*3.1;\n    float f = 0.1*p;\n    uv+=(sin(a)*f,cos(a)*f);\n    float t = 99.99+TIME;\n    float angle = atan(uv.x,uv.y);\n    float d = 0.3+length(uv);\n    float e = sin( t*d*0.05+(sin(d*123.123) + angle));\n    float k = e + (sin(t+cos(d*1.5)*2.3)*1.0-.50);\n    gl_FragColor = vec4(k);\n}\n","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":13,"Metadata":{"ScriptingName":"Dance_floor_lsBXDW","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[553.23,-285.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"Shadertoy\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/lsBXDW by Nrx.  Simple test...\",\n  \"INPUTS\" : [\n    {\n      \"NAME\" : \"iChannel0\",\n      \"TYPE\" : \"audio\"\n    }\n  ]\n}\n*/\n\n\nvec3 hsv2rgb (in vec3 hsv) {\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\treturn hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * 3.14159 * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n}\n\nfloat rand (in vec2 seed) {\n\treturn fract (sin (dot (seed, vec2 (12.9898, 78.233))) * 137.5453);\n}\n\nvoid main() {\n\n\tvec2 frag = (2.0 * gl_FragCoord.xy - RENDERSIZE.xy) / RENDERSIZE.y;\n\tfrag *= 1.0 - 0.2 * cos (frag.yx) * sin (3.14159 * 0.5 * IMG_NORM_PIXEL(iChannel0,mod(vec2 (0.0),1.0)).x);\n\tfrag *= 5.0;\n\tfloat random = rand (floor (frag));\n\tvec2 black = smoothstep (1.0, 0.8, cos (frag * 3.14159 * 2.0));\n\tvec3 color = hsv2rgb (vec3 (random, 1.0, 1.0));\n\tcolor *= black.x * black.y * smoothstep (1.0, 0.0, length (fract (frag) - 0.5));\n\tcolor *= 0.5 + 0.5 * cos (random + random * TIME + TIME + 3.14159 * 0.5 * IMG_NORM_PIXEL(iChannel0,mod(vec2 (0.7),1.0)).x);\n\tgl_FragColor = vec4 (color, 1.0);\n}\n","Inlets":[{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":12,"Metadata":{"ScriptingName":"CosmicFlare","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[224.23000000000002,-318.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by mojovideotech\",\n\t\"DESCRIPTION\": \"\",\n\t\"CATEGORIES\": [\n\t\t\"XXX\"\n\t],\n\t\"INPUTS\": [\n\t {\n            \"NAME\": \"brightness\",\n            \"TYPE\": \"float\",\n           \"DEFAULT\": 2,\n            \"MIN\": 0,\n            \"MAX\": 5\n          },\n          {\n            \"NAME\": \"ray_brightness\",\n            \"TYPE\": \"float\",\n           \"DEFAULT\": 6,\n            \"MIN\": 0,\n            \"MAX\": 10\n          },\n  \t\t{\n\t\t\t\"NAME\": \"gamma\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 2,\n\t\t\t\"MIN\": -15,\n\t\t\t\"MAX\": 15\n\t\t},\n\t\t{\n            \"NAME\": \"spot_brightness\",\n            \"TYPE\": \"float\",\n           \"DEFAULT\": 5,\n            \"MIN\": -15,\n            \"MAX\": 15\n          },\n\t\t{\n\t\t\t\"NAME\": \"ray_density\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 10,\n\t\t\t\"MIN\": 0,\n\t\t\t\"MAX\": 100\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"curvature\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 300,\n\t\t\t\"MIN\": 1,\n\t\t\t\"MAX\": 1080\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"freq\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 8,\n\t\t\t\"MIN\": 1,\n\t\t\t\"MAX\": 60\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"warp\",\n\t\t\t\"TYPE\": \"bool\",\n\t\t\t\"DEFAULT\": 1.0\n\t\t},\n\t\t {\n            \"NAME\": \"red\",\n            \"TYPE\": \"float\",\n           \"DEFAULT\": 7.0,\n            \"MIN\": 0.0,\n            \"MAX\": 10.0\n        },\n         {\n            \"NAME\": \"green\",\n            \"TYPE\": \"float\",\n           \"DEFAULT\": 2.0,\n            \"MIN\": 0.0,\n            \"MAX\": 10.0\n        },\n         {\n            \"NAME\": \"blue\",\n            \"TYPE\": \"float\",\n           \"DEFAULT\": 1.0,\n            \"MIN\": 0.0,\n            \"MAX\": 10.0\n        }\n  ]\n}\n*/\n\n// CosmicFlare by mojovideotech\n// based on :\n// Flaring by nimitz\n// https://www.shadertoy.com/view/lsSGzy\n\n\nfloat hash( float n ){return fract(sin(n)*43758.5453);}\n\nfloat noise( in vec2 x )\n{\n\tx *= 1.75;\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n    return res;\n}\n\nmat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm( in vec2 p )\n{\t\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tp *= 0.25;\n\tfor (float i= 1.;i < 6.;i++ )\n\t{\n\t\trz+= (sin(noise(p)*freq)*0.5+0.5) /z;\n\t\tz = z*2.;\n\t\tp = p*2.*m2;\n\t}\n\treturn rz;\n}\n\nvoid main()\n{\n\tfloat t = -TIME*0.03;\n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy-0.5;\n\tuv.x *= RENDERSIZE.x/RENDERSIZE.y;\n\tuv*= curvature*.05+0.0001;\n\tfloat r  = sqrt(dot(uv,uv));\n\tfloat x = dot(normalize(uv), vec2(.5,0.))+t;\t\n\tfloat y = dot(normalize(uv), vec2(.0,.5))+t;\n\tif (warp)\n\t\tx = fbm(vec2(y*ray_density*0.5,r+x*ray_density*.2));\n\t\ty = fbm(vec2(r+y*ray_density*0.1,x*ray_density*.5));\n \tfloat val;\n    val = fbm(vec2(r+y*ray_density,r+x*ray_density-y));\n\tval = smoothstep(gamma*.02-.1,ray_brightness+(gamma*0.02-.1)+.001,val);\n\tval = sqrt(val);\n\tvec3 col = val/vec3(red,green,blue);\n\tcol = clamp(1.-col,0.,1.);\n\tcol = mix(col,vec3(1.),spot_brightness-r/0.1/curvature*200./brightness);\n\t\n\tgl_FragColor = vec4(col,1.0);\n}","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"brightness","Exposed":"brightness","Value":{"Float":2.0},"Domain":{"Float":{"Min":0.0,"Max":5.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"ray_brightness","Exposed":"ray_brightness","Value":{"Float":6.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"gamma","Exposed":"gamma","Value":{"Float":2.0},"Domain":{"Float":{"Min":-15.0,"Max":15.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"spot_brightness","Exposed":"spot_brightness","Value":{"Float":5.0},"Domain":{"Float":{"Min":-15.0,"Max":15.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"ray_density","Exposed":"ray_density","Value":{"Float":10.0},"Domain":{"Float":{"Min":0.0,"Max":100.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"curvature","Exposed":"curvature","Value":{"Float":300.0},"Domain":{"Float":{"Min":1.0,"Max":1080.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"freq","Exposed":"freq","Value":{"Float":8.0},"Domain":{"Float":{"Min":1.0,"Max":60.0}}},{"uuid":"fb27e4cb-ea7f-41e2-ad92-2354498c1b6b","ObjectName":"Inlet","id":7,"Hidden":true,"Custom":"warp","Exposed":"warp","Value":{"Bool":false},"Domain":{"Bool":null}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"red","Exposed":"red","Value":{"Float":7.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"green","Exposed":"green","Value":{"Float":2.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"blue","Exposed":"blue","Value":{"Float":1.0},"Domain":{"Float":{"Min":0.0,"Max":10.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":11,"Metadata":{"ScriptingName":"Complex_Form_with_Spirals_MtcXD7","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[164.23000000000002,216.0730000000001],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"voronoi\",\n    \"spiral\",\n    \"codevember\",\n    \"Automatically Converted\",\n    \"Shadertoy\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/MtcXD7 by xorxor.  After Sol Lewitt's Complex Form with Black and White Bands.\\n\\nfor Codevember 2016, day 22.\",\n  \"INPUTS\" : [\n  \n    \n    {\n\t\t\t\"NAME\": \"speed\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 6.2831,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 20.0\n\t}\n  ]\n}\n*/\n\n\n// Complex Form with Black and White Spirals\n// Created by XORXOR, 2016\n// Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\n//\n// Thanks to iq for voronoi\n// https://www.shadertoy.com/view/ldl3W8\n\n#define ANIMATE\n\nvec2 hash( vec2 p )\n{\n    return fract( sin( vec2( p.x * p.y, p.x + p.y ) ) * vec2( 234342.1459123, 373445.3490423 ) );\n}\n\n// iq's voronoi\n// https://www.shadertoy.com/view/ldl3W8\nvec4 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    vec2 mg, mr, mo;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n        vec2 o = hash( n + g );\n        #ifdef ANIMATE\n        o = 0.5 + 0.3*sin( TIME + speed*o );\n        #endif\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n            mo = o;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n        vec2 o = hash( n + g );\n        #ifdef ANIMATE\n        o = 0.5 + 0.3*sin( TIME + speed*o );\n        #endif\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec4( md, mr, mo.x + mo.y );\n}\n\nvoid main() {\n\n\n\n    vec2 b = 6.0 * gl_FragCoord.xy / RENDERSIZE.x;\n    vec4 v = voronoi( b );\n    vec2 q = v.yz;\n    float a = TIME + atan( sign( v.w - 1.0 ) * q.y, q.x );\n    float l = length( q * 5.0 / ( sqrt( v.x ) ) ) + 0.319 * a;\n    float m = mod( l, 2.0 );\n#if 1 // sharpening by s23b\n    float w = min( fwidth( mod( l + 1.5, 2.0 ) ), fwidth( mod( l + 0.5, 2.0 ) ) ) / 2.0;\n\tfloat o = ( 1.0 - smoothstep( 1.85 - w, 1.85 + w, m ) ) * smoothstep( 1.15 - w, 1.15 + w, m );\n#else\n    float o = ( 1.0 - smoothstep( 1.7, 2.0, m ) ) * smoothstep( 1.0, 1.3, m );\n#endif\n    o = mix( 0.0, o, smoothstep( 0.04, 0.07, v.x ) );\n    gl_FragColor = vec4( vec3( o ), 1.0 );\n}\n","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"speed","Exposed":"speed","Value":{"Float":6.283100128173828},"Domain":{"Float":{"Min":0.0,"Max":20.0}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":10,"Metadata":{"ScriptingName":"bubble_dist_plasma_lt23Dt","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[295.23,-388.9269999999999],"Size":[115.6875,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"Automatically Converted\",\n    \"Shadertoy\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/lt23Dt by FabriceNeyret2.  Well, it first was a bug in a Worley\\/Voronoi shader... :-)\\n\\nNB: try #define NOISE  1 or 3 if you wish.\",\n  \"INPUTS\" : [\n\n  ]\n}\n*/\n\n\n#define NOISE 2 // Perlin, Worley1, Worley2\n\n#define PI 3.14159\n\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n           \t\t    -0.80,  0.36, -0.48,\n             \t\t-0.60, -0.48,  0.64 );\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x ) { // in [0,1]\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.-2.*f);\n\n    float n = p.x + p.y*57. + 113.*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.), hash(n+  1.),f.x),\n                        mix( hash(n+ 57.), hash(n+ 58.),f.x),f.y),\n                    mix(mix( hash(n+113.), hash(n+114.),f.x),\n                        mix( hash(n+170.), hash(n+171.),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p ) { // in [0,1]\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f;\n}\n// --- End of: Created by inigo quilez --------------------\n\n// more 2D noise\nvec2 hash12( float n ) {\n    return fract(sin(n+vec2(1.,12.345))*43758.5453);\n}\nfloat hash21( vec2 n ) {\n    return hash(n.x+10.*n.y);\n}\nvec2 hash22( vec2 n ) {\n    return hash12(n.x+10.*n.y);\n}\nfloat cell;   // id of closest cell\nvec2  center; // center of closest cell\n\nvec3 worley( vec2 p ) {\n    vec3 d = vec3(1e15);\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n                vec2 p0 = ip+vec2(i,j);\n            \tfloat a0 = hash21(p0), a=5.*a0*TIME+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n                vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n                float d0 = dot(c,c);\n                if      (d0<d.x) { d.yz=d.xy; d.x=d0; cell=hash21(p0); center=c;}\n                else if (d0<d.y) { d.z =d.y ; d.y=d0; }\n                else if (d0<d.z) {            d.z=d0; }  \n            }\n    return sqrt(d);\n}\n\n// distance to Voronoi borders, as explained in https://www.shadertoy.com/view/ldl3W8 \nfloat worleyD( vec2 p) {\n    float d = 1e15;\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n                vec2 p0 = ip+vec2(i,j);\n            \tfloat a0 = hash21(p0), a=5.*a0*TIME+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n                vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n                float d0 = dot(c,c);\n \t    float c0 = dot(center+c,normalize(c-center));\n        d=min(d, c0);\n    }\n\n    return .5*d;\n}\n\n\nfloat grad, scale = 5.; \n\n// my noise\nfloat tweaknoise( vec2 p) {\n    float d=0.;\n    for (float i=0.; i<5.; i++) {\n        float a0 = hash(i+5.6789), a=1.*a0*TIME+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n                \n        vec2 ip = hash12(i+5.6789)+dp;\n        float di = smoothstep(grad/2.,-grad/2.,length(p-ip)-.5);\n        d += (1.-d)*di;\n    }\n    //float d = smoothstep(grad/2.,-grad/2.,length(p)-.5);\n#if NOISE==1 // 3D Perlin noise\n    float v = fbm(vec3(scale*p,.5));\n#elif NOISE==2 // Worley noise\n    float v = 1. - scale*worley(scale*p).x;\n#elif NOISE>=3 // trabeculum 2D\n    if (d<0.5) return 0.;\n    grad=.8, scale = 5.;\n\tvec3 w = scale*worley(scale*p);\n    float v;\n    if (false) // keyToggle(32)) \n        v =  2.*scale*worleyD(scale*p);\n    else\n \tv= w.y-w.x;\t //  v= 1.-1./(w.y-w.x);\n#endif\n    \n    return v*d;\n    //return smoothstep(thresh-grad/2.,thresh+grad/2.,v*d);\n}\n\n\nvoid main() {\n\n\n\n    grad = 0.05+4.*(1.+cos(TIME))*.5;\n    vec2 p = 2.*(gl_FragCoord.xy / RENDERSIZE.y -vec2(.9,.5));\n  \n    float c0=tweaknoise(p), c=sin(c0*5.);\n    vec3 col; // = vec3(c);\n    col = .5+.5*cos(c0*5.+vec3(0.,2.*PI/3.,-2.*PI/3.));\n    col *= vec3(sin(12.*c0)); \n    // col = mix(col,vec3(cos(12.*c0)),.5);\n    col = mix(col,vec3(c),.5+.5*cos(.13*(TIME-6.)));\n   gl_FragColor = vec4(col,1.);\n}\n","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":9,"Metadata":{"ScriptingName":"37_CircleSpiral","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-89.76999999999998,158.0730000000001],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"// SaturdayShader Week 37 : CircleSpiral\n// by Joseph Fiola (http://www.joefiola.com)\n// 2016-04-30\n\n// Based on \"CircleSpiral\" Shadertoy by mmalex\n// https://www.shadertoy.com/view/4sBGRh\n\n/*{\n\t\"CREDIT\": \"\",\n\t\"DESCRIPTION\": \"\",\n\t\"CATEGORIES\": [\n\t\t\"Generator\"\n\t],\n\t\"INPUTS\": [\n\t\t\t{\n\t\t\t\"NAME\": \"invert\",\n\t\t\t\"TYPE\": \"bool\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"zoom\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.5,\n\t\t\t\"MIN\": 0.25,\n\t\t\t\"MAX\": 10.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"rotate\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.0,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"offset\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 15.0,\n\t\t\t\"MIN\": -50.0,\n\t\t\t\"MAX\": 50.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"speed\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.1,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 3.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"lineThickness\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 1.5,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 50.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"radius\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 1.5,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 50.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"pos\",\n\t\t\t\"TYPE\": \"point2D\",\n\t\t\t\"DEFAULT\": [0.5,0.5],\n\t\t\t\"MIN\":[0.0,0.0],\n\t\t\t\"MAX\":[1.0,1.0]\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"mode\",\n\t\t\t\"TYPE\": \"long\",\n\t\t\t\"VALUES\": [\n\t\t\t\t0,\n\t\t\t\t1\n\t\t\t],\n\t\t\t\"LABELS\": [\n\t\t\t\t\"spiral\",\n\t\t\t\t\"wave\"\n\t\t\t],\n\t\t\t\"DEFAULT\": 0\n\t\t}\n\t]\n}*/\n\n\n#define TWO_PI 6.28318530718\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid main()\n{\n\tfloat res=min(RENDERSIZE.x,RENDERSIZE.y);\n\tfloat pixel=1.0/res;\n\tvec2 p = (gl_FragCoord.xy-RENDERSIZE.xy * vec2(pos)) * pixel;\n\tp = rotate2d(rotate* -TWO_PI) * p;\n\tp *=zoom;\n\n\tfloat ink=0.0,theta=0.0;\n\tfloat rr=res;\n\tfloat ofs=0.0001*(TIME + 10.)  * offset + pixel * 0.25;\n\n\tfor (int iter=0;iter<100;++iter) {\n\t\tink +=  max(0.0, lineThickness - abs(length(p) - radius) * rr);\n\t\trr /= 1.1; // center glow\n\t\tp *= 1.1;\n\t\tp.x += ofs * sin(theta);\n\t\tif (mode == 0) p.y += ofs * cos(theta);\t\t\n\t\tif (mode == 1) p.y += ofs * sin(theta);\n\t\t\n\t\ttheta += TIME * speed;\n\t}\n\t\n\tink=sqrt(ink)*0.5; // line blur\n\t\n\tif  (invert) ink = ink *-1.0 + 1.0;\n\n\tgl_FragColor = vec4(vec3(ink),1.0);\n\n}","Inlets":[{"uuid":"fb27e4cb-ea7f-41e2-ad92-2354498c1b6b","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"invert","Exposed":"invert","Value":{"Bool":false},"Domain":{"Bool":null}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"zoom","Exposed":"zoom","Value":{"Float":0.5},"Domain":{"Float":{"Min":0.25,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"rotate","Exposed":"rotate","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"offset","Exposed":"offset","Value":{"Float":15.0},"Domain":{"Float":{"Min":-50.0,"Max":50.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"speed","Exposed":"speed","Value":{"Float":0.10000000149011612},"Domain":{"Float":{"Min":0.0,"Max":3.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"lineThickness","Exposed":"linethickness","Value":{"Float":1.5},"Domain":{"Float":{"Min":0.0,"Max":50.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"radius","Exposed":"radius","Value":{"Float":1.5},"Domain":{"Float":{"Min":0.0,"Max":50.0}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":7,"Hidden":true,"Custom":"pos","Exposed":"pos","Value":{"Vec2f":[0.5,0.5]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[1.0,1.0],"Values":[[],[]]}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"mode","Exposed":"mode","Value":{"Int":0},"Domain":{"Int":{"Values":[0,1]}},"Values":[["spiral",{"Int":0}],["wave",{"Int":1}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":8,"Metadata":{"ScriptingName":"2D_Sine_Curve_Ml33Ds","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[321.23,-465.9269999999999],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"2d\",\n    \"trig\",\n    \"Automatically Converted\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/Ml33Ds by pcr3w.  A nice sine colour curve I got whilst messing around with the starter shader.\",\n  \"INPUTS\" : [\n\n  ]\n}\n*/\n\n\nvoid main(){\n    vec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\n    \n    float speed = 5.0;\n    float multiplier = sin(uv.x * pow(uv.y, speed));\n    \n\tfloat red = (sin((multiplier + speed) * TIME + 0.0) * 127.0 + 128.0) / 255.0;\n    float green = (sin((multiplier + speed) * TIME + 2.0) * 127.0 + 128.0) / 255.0;\n    float blue = (sin((multiplier + speed) * TIME + 4.0) * 127.0 + 128.0) / 255.0;\n    \n\tgl_FragColor = vec4(red, green, blue, 1.0);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":7,"Metadata":{"ScriptingName":"28_TurbulentShapes","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-345.77,-62.92699999999991],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"// SaturdayShader Week 28 : Turbulent Shapes\n// by Joseph Fiola (http://www.joefiola.com)\n// 2016-02-27\n\n// This is a remix of Patricio Gonzalez Vivo's\n// VectorField - http://patriciogonzalezvivo.github.io/glslEditor/?log=160224011512\n// and @kyndinfo's Distance Field Transitions http://thebookofshaders.com/edit.html?log=160131053646\n\n/*{\n\t\"CREDIT\": \"Joseph Fiola, based on work by Patricio Gonzalez and @kyndinfo\",\n\t\"DESCRIPTION\": \"\",\n\t\"CATEGORIES\": [\n\t\t\"Generator\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"zoom\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 20.0,\n\t\t\t\"MIN\": 1.0,\n\t\t\t\"MAX\": 60.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"scale\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.25,\n\t\t\t\"MIN\": -4.0,\n\t\t\t\"MAX\": 4.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"spin\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.25,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 10.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"turbulanceSpeed\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.3,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 2.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"turbulanceZoom\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.1,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"shape\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.0,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 8.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"rotateCanvas\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.0,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"centerTile\",\n\t\t\t\"TYPE\": \"bool\",\n\t\t\t\"DEFAULT\": true\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"pos\",\n\t\t\t\"TYPE\": \"point2D\",\n\t\t\t\"DEFAULT\": [0.5,0.5],\n\t\t\t\"MIN\":[0.0,0.0],\n\t\t\t\"MAX\":[1.0,1.0]\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"posOffset\",\n\t\t\t\"TYPE\": \"point2D\",\n\t\t\t\"DEFAULT\": [0.5,0.5],\n\t\t\t\"MIN\":[0.0,0.0],\n\t\t\t\"MAX\":[1.0,1.0]\n\t\t}\n\t]\n}*/\n\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nfloat smoothedge(float v) {\n    return smoothstep(0.0, 1.0 / RENDERSIZE.x, v) * -1.0 +1.0;\n}\n\nfloat circle(vec2 p, float radius) {\n  return length(p) - radius;\n}\n\nfloat ring(vec2 p, float radius, float width) {\n  return abs(length(p) - radius) - width;\n}\n\n//http://thndl.com/square-shaped-shaders.html\nfloat polygon(vec2 p, int vertices, float size) {\n    float a = atan(p.x, p.y) + 0.2;\n    float b = 6.28319 / float(vertices);\n    return cos(floor(0.5 + a / b) * b - a) * length(p) - size;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 3.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat getShape(vec2 fpos, int i, float scale) {\n    if (i == 0) {\n        return polygon(fpos, 2, scale); //rectangle\n    } else if (i == 1) {\n        return polygon(fpos, 1, scale); //line\n    } else if (i == 2) {\n        return polygon(fpos, 3, scale); //triangle\n    } else if (i == 3) {\n        return polygon(fpos, 4, scale); //square\n    } else if (i == 4) {\n        return polygon(fpos, 6, scale); //hexagon\n    } else if (i == 5) {\n        return circle(fpos, scale);\t\t//circle\n    } else if (i == 6) {\n        return ring(fpos, scale,scale*0.25); //ring1\n    } else if (i ==7) {\n        return ring(fpos, scale * 2.0 ,scale); //ring2\n\t} else {\n        return polygon(fpos, 4, scale); //square\n    }\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/RENDERSIZE.xy;\n   \tst -= vec2(pos);\n\tst.x *= RENDERSIZE.x/RENDERSIZE.y;\n\n    st = rotate2d(rotateCanvas*-TWO_PI) * st; \n\n\n    st *= zoom; // Scale the coordinate system by 10\n    \n   \tif (centerTile) st+=0.5; // centers tile\n\n    vec2 ipos = floor(st);  // get the integer coords\n    vec2 fpos = fract(st);  // get the fractional coords\n    \n    float angle = snoise(ipos*turbulanceZoom+TIME*turbulanceSpeed)*spin;\n    float scale = snoise(ipos*turbulanceZoom+TIME*turbulanceSpeed)*scale;\n    \n    fpos -= posOffset;\n    fpos = rotate2d(angle*PI)* fpos;\n\n    float t0 = mod(shape, 9.0);\n    float t1 = mod(shape + 1.0, 9.0);\n    int i0 = int(floor(t0));\n    int i1 = int(floor(t1));\n    float f = fract(t0);\n    \n    vec3 color = vec3(smoothedge(mix(getShape(fpos, i0, scale), getShape(fpos, i1, scale), f)));\n\n    gl_FragColor = vec4(color,1.0);\n}","Inlets":[{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"zoom","Exposed":"zoom","Value":{"Float":20.0},"Domain":{"Float":{"Min":1.0,"Max":60.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"scale","Exposed":"scale","Value":{"Float":0.25},"Domain":{"Float":{"Min":-4.0,"Max":4.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"spin","Exposed":"spin","Value":{"Float":0.25},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"turbulanceSpeed","Exposed":"turbulancespeed","Value":{"Float":0.30000001192092896},"Domain":{"Float":{"Min":0.0,"Max":2.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"turbulanceZoom","Exposed":"turbulancezoom","Value":{"Float":0.10000000149011612},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"shape","Exposed":"shape","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":8.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"rotateCanvas","Exposed":"rotatecanvas","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"fb27e4cb-ea7f-41e2-ad92-2354498c1b6b","ObjectName":"Inlet","id":7,"Hidden":true,"Custom":"centerTile","Exposed":"centertile","Value":{"Bool":true},"Domain":{"Bool":null}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"pos","Exposed":"pos","Value":{"Vec2f":[0.5,0.5]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[1.0,1.0],"Values":[[],[]]}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"posOffset","Exposed":"posoffset","Value":{"Vec2f":[0.5,0.5]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[1.0,1.0],"Values":[[],[]]}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":6,"Metadata":{"ScriptingName":"Video Mixer.1","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[1139.23,26.073000000000093],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"General\"\n    ],\n    \"CREDIT\": \"Jamie Owen, Jean-MichaÃ«l Celerier\",\n    \"DESCRIPTION\": \"8-channel video mixer\",\n    \"INPUTS\": [\n        { \"NAME\": \"t1\", \"LABEL\" : \"Texture 1\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t2\", \"LABEL\" : \"Texture 2\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t3\", \"LABEL\" : \"Texture 3\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t4\", \"LABEL\" : \"Texture 4\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t5\", \"LABEL\" : \"Texture 5\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t6\", \"LABEL\" : \"Texture 6\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t7\", \"LABEL\" : \"Texture 7\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t8\", \"LABEL\" : \"Texture 8\", \"TYPE\": \"image\" },\n        { \"NAME\": \"alpha1\", \"LABEL\" : \"Alpha 1\", \"DEFAULT\": 1, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha2\", \"LABEL\" : \"Alpha 2\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha3\", \"LABEL\" : \"Alpha 3\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha4\", \"LABEL\" : \"Alpha 4\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha5\", \"LABEL\" : \"Alpha 5\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha6\", \"LABEL\" : \"Alpha 6\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha7\", \"LABEL\" : \"Alpha 7\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha8\", \"LABEL\" : \"Alpha 8\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 1\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode1\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 2\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode2\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 3\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode3\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 4\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode4\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 5\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode5\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 6\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode6\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 7\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode7\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n/* Blend mode implementations courtesy of Jamie Owen:\n\n   https://github.com/jamieowen/glsl-blend\n\nThe MIT License (MIT) Copyright (c) 2015 Jamie Owen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\nvec3 blendPhoenix(vec3 base, vec3 blend) {\n  return min(base, blend) - max(base, blend) + vec3(1.0);\n}\n\nvec3 blendPhoenix(vec3 base, vec3 blend, float opacity) {\n  return (blendPhoenix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendOverlay(float base, float blend) {\n  return base < 0.5 ? (2.0 * base * blend)\n                    : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return vec3(blendOverlay(base.r, blend.r), blendOverlay(base.g, blend.g),\n              blendOverlay(base.b, blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n  return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNormal(vec3 base, vec3 blend) { return blend; }\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNegation(vec3 base, vec3 blend) {\n  return vec3(1.0) - abs(vec3(1.0) - base - blend);\n}\n\nvec3 blendNegation(vec3 base, vec3 blend, float opacity) {\n  return (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend) { return base * blend; }\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n  return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendReflect(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0);\n}\n\nvec3 blendReflect(vec3 base, vec3 blend) {\n  return vec3(blendReflect(base.r, blend.r), blendReflect(base.g, blend.g),\n              blendReflect(base.b, blend.b));\n}\n\nvec3 blendReflect(vec3 base, vec3 blend, float opacity) {\n  return (blendReflect(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendAverage(vec3 base, vec3 blend) { return (base + blend) / 2.0; }\n\nvec3 blendAverage(vec3 base, vec3 blend, float opacity) {\n  return (blendAverage(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearBurn(float base, float blend) {\n  // Note : Same implementation as BlendSubtractf\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendSubtract\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLighten(float base, float blend) { return max(blend, base); }\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return vec3(blendLighten(base.r, blend.r), blendLighten(base.g, blend.g),\n              blendLighten(base.b, blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n  return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendScreen(float base, float blend) {\n  return 1.0 - ((1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n  return vec3(blendScreen(base.r, blend.r), blendScreen(base.g, blend.g),\n              blendScreen(base.b, blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n  return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSoftLight(float base, float blend) {\n  return (blend < 0.5)\n             ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend))\n             : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return vec3(blendSoftLight(base.r, blend.r), blendSoftLight(base.g, blend.g),\n              blendSoftLight(base.b, blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n  return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSubtract(float base, float blend) {\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend) {\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend, float opacity) {\n  return (blendSubtract(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend, float opacity) {\n  return (blendExclusion(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendDifference(vec3 base, vec3 blend) { return abs(base - blend); }\n\nvec3 blendDifference(vec3 base, vec3 blend, float opacity) {\n  return (blendDifference(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendDarken(float base, float blend) { return min(blend, base); }\n\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return vec3(blendDarken(base.r, blend.r), blendDarken(base.g, blend.g),\n              blendDarken(base.b, blend.b));\n}\n\nvec3 blendDarken(vec3 base, vec3 blend, float opacity) {\n  return (blendDarken(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorDodge(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return vec3(blendColorDodge(base.r, blend.r),\n              blendColorDodge(base.g, blend.g),\n              blendColorDodge(base.b, blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorBurn(float base, float blend) {\n  return (blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return vec3(blendColorBurn(base.r, blend.r), blendColorBurn(base.g, blend.g),\n              blendColorBurn(base.b, blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendAdd(float base, float blend) { return min(base + blend, 1.0); }\n\nvec3 blendAdd(vec3 base, vec3 blend) { return min(base + blend, vec3(1.0)); }\n\nvec3 blendAdd(vec3 base, vec3 blend, float opacity) {\n  return (blendAdd(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearDodge(float base, float blend) {\n  // Note : Same implementation as BlendAddf\n  return min(base + blend, 1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendAdd\n  return min(base + blend, vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend) { return blendOverlay(blend, base); }\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n  return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendGlow(vec3 base, vec3 blend) { return blendReflect(blend, base); }\n\nvec3 blendGlow(vec3 base, vec3 blend, float opacity) {\n  return (blendGlow(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendVividLight(float base, float blend) {\n  return (blend < 0.5) ? blendColorBurn(base, (2.0 * blend))\n                       : blendColorDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n  return vec3(blendVividLight(base.r, blend.r),\n              blendVividLight(base.g, blend.g),\n              blendVividLight(base.b, blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n  return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendHardMix(float base, float blend) {\n  return (blendVividLight(base, blend) < 0.5) ? 0.0 : 1.0;\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend) {\n  return vec3(blendHardMix(base.r, blend.r), blendHardMix(base.g, blend.g),\n              blendHardMix(base.b, blend.b));\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend, float opacity) {\n  return (blendHardMix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearLight(float base, float blend) {\n  return blend < 0.5 ? blendLinearBurn(base, (2.0 * blend))\n                     : blendLinearDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n  return vec3(blendLinearLight(base.r, blend.r),\n              blendLinearLight(base.g, blend.g),\n              blendLinearLight(base.b, blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendPinLight(float base, float blend) {\n  return (blend < 0.5) ? blendDarken(base, (2.0 * blend))\n                       : blendLighten(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend) {\n  return vec3(blendPinLight(base.r, blend.r), blendPinLight(base.g, blend.g),\n              blendPinLight(base.b, blend.b));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend, float opacity) {\n  return (blendPinLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend) {\n  if (mode == 1) {\n    return blendAdd(base, blend);\n  } else if (mode == 2) {\n    return blendAverage(base, blend);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend);\n  } else if (mode == 5) {\n    return blendDarken(base, blend);\n  } else if (mode == 6) {\n    return blendDifference(base, blend);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend);\n  } else if (mode == 8) {\n    return blendGlow(base, blend);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend);\n  } else if (mode == 11) {\n    return blendLighten(base, blend);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend);\n  } else if (mode == 16) {\n    return blendNegation(base, blend);\n  } else if (mode == 17) {\n    return blendNormal(base, blend);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend);\n  } else if (mode == 21) {\n    return blendReflect(base, blend);\n  } else if (mode == 22) {\n    return blendScreen(base, blend);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend);\n  }\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend, float opacity) {\n  if (mode == 1) {\n    return blendAdd(base, blend, opacity);\n  } else if (mode == 2) {\n    return blendAverage(base, blend, opacity);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend, opacity);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend, opacity);\n  } else if (mode == 5) {\n    return blendDarken(base, blend, opacity);\n  } else if (mode == 6) {\n    return blendDifference(base, blend, opacity);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend, opacity);\n  } else if (mode == 8) {\n    return blendGlow(base, blend, opacity);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend, opacity);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend, opacity);\n  } else if (mode == 11) {\n    return blendLighten(base, blend, opacity);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend, opacity);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend, opacity);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend, opacity);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend, opacity);\n  } else if (mode == 16) {\n    return blendNegation(base, blend, opacity);\n  } else if (mode == 17) {\n    return blendNormal(base, blend, opacity);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend, opacity);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend, opacity);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend, opacity);\n  } else if (mode == 21) {\n    return blendReflect(base, blend, opacity);\n  } else if (mode == 22) {\n    return blendScreen(base, blend, opacity);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend, opacity);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend, opacity);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend, opacity);\n  }\n}\n\nvoid main()\t{\n  gl_FragColor.rgb = \n    blendMode(mode1, alpha1 * IMG_THIS_NORM_PIXEL(t1).rgb * IMG_THIS_NORM_PIXEL(t1).a,\n    blendMode(mode2, alpha2 * IMG_THIS_NORM_PIXEL(t2).rgb * IMG_THIS_NORM_PIXEL(t2).a,\n    blendMode(mode3, alpha3 * IMG_THIS_NORM_PIXEL(t3).rgb * IMG_THIS_NORM_PIXEL(t3).a,\n    blendMode(mode4, alpha4 * IMG_THIS_NORM_PIXEL(t4).rgb * IMG_THIS_NORM_PIXEL(t4).a,\n    blendMode(mode5, alpha5 * IMG_THIS_NORM_PIXEL(t5).rgb * IMG_THIS_NORM_PIXEL(t5).a,\n    blendMode(mode6, alpha6 * IMG_THIS_NORM_PIXEL(t6).rgb * IMG_THIS_NORM_PIXEL(t6).a,\n    blendMode(mode7, alpha7 * IMG_THIS_NORM_PIXEL(t7).rgb * IMG_THIS_NORM_PIXEL(t7).a,\n                     alpha8 * IMG_THIS_NORM_PIXEL(t8).rgb * IMG_THIS_NORM_PIXEL(t8).a)))))));\n\n  gl_FragColor.a = 1.0; \n}","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":1,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":2,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":3,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":4,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":5,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":6,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":7,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"alpha1","Exposed":"alpha1","Address":"Code Controls:/1/control/3","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"alpha2","Exposed":"alpha2","Address":"Code Controls:/1/control/7","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"alpha3","Exposed":"alpha3","Address":"Code Controls:/1/control/11","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":11,"Hidden":true,"Custom":"alpha4","Exposed":"alpha4","Address":"Code Controls:/1/control/15","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":12,"Hidden":true,"Custom":"alpha5","Exposed":"alpha5","Address":"Code Controls:/1/control/19","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":13,"Hidden":true,"Custom":"alpha6","Exposed":"alpha6","Address":"Code Controls:/1/control/23","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":14,"Hidden":true,"Custom":"alpha7","Exposed":"alpha7","Address":"Code Controls:/1/control/27","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":15,"Hidden":true,"Custom":"alpha8","Exposed":"alpha8","Address":"Code Controls:/1/control/31","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":16,"Hidden":true,"Custom":"mode1","Exposed":"mode1","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":17,"Hidden":true,"Custom":"mode2","Exposed":"mode2","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":18,"Hidden":true,"Custom":"mode3","Exposed":"mode3","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":19,"Hidden":true,"Custom":"mode4","Exposed":"mode4","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":20,"Hidden":true,"Custom":"mode5","Exposed":"mode5","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":21,"Hidden":true,"Custom":"mode6","Exposed":"mode6","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":22,"Hidden":true,"Custom":"mode7","Exposed":"mode7","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":5,"Metadata":{"ScriptingName":"Boxinator","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-625.77,-107.92699999999991],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\": \"by mojovideotech\",\n\t\"ISFVSN\": \"2\",\n\t\"CATEGORIES\": [\n\t\t\"Stylize\"\n\t],\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\": \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"rate\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 2.5,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 10.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"edge\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.001,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 0.01\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"blend\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.95,\n\t\t\t\"MIN\": -1.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"randomize\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": 0.5,\n\t\t\t\"MIN\": 0.0,\n\t\t\t\"MAX\": 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"gamma\",\n\t\t\t\"TYPE\": \"float\",\n\t\t\t\"DEFAULT\": -0.3,\n\t\t\t\"MIN\": -0.5,\n\t\t\t\"MAX\": 0.2\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"grid\",\n\t\t\t\"TYPE\": \"point2D\",\n\t\t\t\"DEFAULT\": [ 64.0, 36.0 ],\n\t\t\t\"MIN\": [ 1.5, 1.5 ],\n\t\t\t\"MAX\": [ 900.0, 600.0 ]\n\t\t}\n\t]\n}*/\n\n////////////////////////////////////////////////////////////////////\n// Boxinator  by mojovideotech\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n////////////////////////////////////////////////////////////////////\n\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n//------------------------------------------------------------------\n// simplex noise function\n// by : Ian McEwan, Ashima Arts\n// Â© 2011 Ashima Arts,  MIT License\n\nvec4 permute(vec4 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v) { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n//------------------------------------------------------------------\n\nfloat hash(float h) { return fract(sin(h) * 43758.5453123); }\n\nvec2 tile(vec2 cell, vec2 size) { return fract(cell*size); }\n\nfloat box(vec2 a, vec2 b){ vec2 o = step(b,a); return o.x*o.y; }\n\nvoid main(void){\n\tfloat T = TIME*rate;\n    vec2 uv = gl_FragCoord.xy/RENDERSIZE.xy;\n    vec2 g = floor(grid.xy);\n    float C = g.x*g.y ;                                                                                                                                          \n    float I = 1.0 + floor(uv.x * g.x) + g.y * floor(uv.y * g.y) + g.x;\n\tvec2 st = tile(uv, g);\n    float S = I / C * box(st, vec2(edge*g.xy));\n    S = mix(S,hash(S),randomize);\n    vec3 color = vec3(S*T);\n\tfloat n = snoise(color+IMG_NORM_PIXEL(inputImage, uv.xy).xyz*blend);  \n\n    gl_FragColor = sqrt(max(vec4(vec3(n, n, n ),1.0)+IMG_NORM_PIXEL(inputImage, uv.xy),0.0)+gamma);\n}\n\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"rate","Exposed":"rate","Value":{"Float":2.5},"Domain":{"Float":{"Min":0.0,"Max":10.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"edge","Exposed":"edge","Value":{"Float":0.0010000000474974513},"Domain":{"Float":{"Min":0.0,"Max":0.009999999776482582}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"blend","Exposed":"blend","Value":{"Float":0.949999988079071},"Domain":{"Float":{"Min":-1.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"randomize","Exposed":"randomize","Value":{"Float":0.5},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":5,"Hidden":true,"Custom":"gamma","Exposed":"gamma","Value":{"Float":-0.30000001192092896},"Domain":{"Float":{"Min":-0.5,"Max":0.20000000298023224}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":6,"Hidden":true,"Custom":"grid","Exposed":"grid","Value":{"Vec2f":[64.0,36.0]},"Domain":{"Vec2f":{"Min":[1.5,1.5],"Max":[900.0,600.0],"Values":[[],[]]}}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":4,"Metadata":{"ScriptingName":"BloodCells_4ttXzj","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[355.23,-531.9269999999999],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"noise\",\n    \"cells\",\n    \"blood\",\n    \"Automatically Converted\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/4ttXzj by kuvkar.  Something that looks like blood.\",\n  \"INPUTS\" : [\n\n  ]\n}\n*/\n\n\n/**\n Just fooling around basicly. Some sort of bloodstream. \n*/\n\n\n// http://iquilezles.org/www/articles/smin/smin.htm\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat cells(vec2 uv){  // Trimmed down.\n    uv = mix(sin(uv + vec2(1.57, 0)), sin(uv.yx*1.4 + vec2(1.57, 0)), .75);\n    return uv.x*uv.y*.3 + .7;\n}\n\n/*\nfloat cells(vec2 uv)\n{\n    float sx = cos(uv.x);\n    float sy = sin(uv.y);\n    sx = mix(sx, cos(uv.y * 1.4), .75);\n    sy = mix(sy, sin(uv.x * 1.4), .75);\n    return .3 * (sx * sy) + .7;\n}\n*/\n\nconst float BEAT = 4.0;\nfloat fbm(vec2 uv)\n{\n    \n    float f = 200.0;\n    vec2 r = (vec2(.9, .45));    \n    vec2 tmp;\n    float T = 100.0 + TIME * 1.3;\n    T += sin(TIME * BEAT) * .1;\n    // layers of cells with some scaling and rotation applied.\n    for (int i = 1; i < 8; ++i)\n    {\n        float fi = float(i);\n        uv.y -= T * .5;\n        uv.x -= T * .4;\n        tmp = uv;\n        \n        uv.x = tmp.x * r.x - tmp.y * r.y; \n        uv.y = tmp.x * r.y + tmp.y * r.x; \n        float m = cells(uv);\n        f = smin(f, m, .07);\n    }\n    return 1. - f;\n}\n\nvec3 g(vec2 uv)\n{\n    vec2 off = vec2(0.0, .03);\n    float t = fbm(uv);\n    float x = t - fbm(uv + off.yx);\n    float y = t - fbm(uv + off);\n    float s = .0025;\n    vec3 xv = vec3(s, x, 0);\n    vec3 yv = vec3(0, y, s);\n    return normalize(cross(xv, -yv)).xzy;\n}\n\nvec3 ld = normalize(vec3(1.0, 2.0, 3.));\n\nvoid main()\n{\n\tvec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;\n    uv -= vec2(0.5);  \n    float a = RENDERSIZE.x / RENDERSIZE.y;\n    uv.y /= a;\n    vec2 ouv = uv;\n    float B = sin(TIME * BEAT);\n    uv = mix(uv, uv * sin(B), .035);\n    vec2 _uv = uv * 25.;\n    float f = fbm(_uv);\n    \n    // base color\n    gl_FragColor = vec4(f);\n    gl_FragColor.rgb *= vec3(1., .3 + B * .05, 0.1 + B * .05);\n    \n    vec3 v = normalize(vec3(uv, 1.));\n    vec3 grad = g(_uv);\n    \n    // spec\n    vec3 H = normalize(ld + v);\n    float S = max(0., dot(grad, H));\n    S = pow(S, 4.0) * .2;\n    gl_FragColor.rgb += S * vec3(.4, .7, .7);\n    // rim\n    float R = 1.0 - clamp(dot(grad, v), .0, 1.);\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(.8, .8, 1.), smoothstep(-.2, 2.9, R));\n    // edges\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.), smoothstep(.45, .55, (max(abs(ouv.y * a), abs(ouv.x)))));\n    \n    // contrast\n    gl_FragColor = smoothstep(.0, 1., gl_FragColor);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":3,"Metadata":{"ScriptingName":"_Target_with_smoothstep_Xsl3RX","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[-925.77,-158.9269999999999],"Size":[108.3125,22.0],"Loops":false,"Vertex":"","Fragment":"/*\n{\n  \"IMPORTED\" : [\n\n  ],\n  \"CATEGORIES\" : [\n    \"rings\",\n    \"targe\",\n    \"hypnotic\",\n    \"moving\",\n    \"smoothstep\",\n    \"Automatically Converted\"\n  ],\n  \"DESCRIPTION\" : \"Automatically converted from https:\\/\\/www.shadertoy.com\\/view\\/Xsl3RX by possum.  Feel free to experiment with the constants.\",\n  \"INPUTS\" : [\n\n  ]\n}\n*/\n\n\nconst float rings = 5.0;\t//exactly the number of complete white rings at any moment.\nconst float velocity=4.;\t\nconst float b = 0.003;\t\t//size of the smoothed border\n\nvoid main()\n{\n\tvec2 position = gl_FragCoord.xy/RENDERSIZE.xy;\n    float aspect = RENDERSIZE.x/RENDERSIZE.y;\n\tposition.x *= aspect;\n\tfloat dist = distance(position, vec2(aspect*0.5, 0.5));\n\tfloat offset=TIME*velocity;\n\tfloat conv=rings*4.;\n\tfloat v=dist*conv-offset;\n\tfloat ringr=floor(v);\n\tfloat color=smoothstep(-b, b, abs(dist- (ringr+float(fract(v)>0.5)+offset)/conv));\n\tif(mod(ringr,2.)==1.)\n\t\tcolor=1.-color;\n\tgl_FragColor = vec4(color, color, color, 1.);\n}","Inlets":[],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":1,"Metadata":{"ScriptingName":"Video Mixer","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[1034.6,-914.89],"Size":[107.890625,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n    \"CATEGORIES\": [\n        \"General\"\n    ],\n    \"CREDIT\": \"Jamie Owen, Jean-MichaÃ«l Celerier\",\n    \"DESCRIPTION\": \"8-channel video mixer\",\n    \"INPUTS\": [\n        { \"NAME\": \"t1\", \"LABEL\" : \"Texture 1\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t2\", \"LABEL\" : \"Texture 2\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t3\", \"LABEL\" : \"Texture 3\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t4\", \"LABEL\" : \"Texture 4\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t5\", \"LABEL\" : \"Texture 5\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t6\", \"LABEL\" : \"Texture 6\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t7\", \"LABEL\" : \"Texture 7\", \"TYPE\": \"image\" },\n        { \"NAME\": \"t8\", \"LABEL\" : \"Texture 8\", \"TYPE\": \"image\" },\n        { \"NAME\": \"alpha1\", \"LABEL\" : \"Alpha 1\", \"DEFAULT\": 1, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha2\", \"LABEL\" : \"Alpha 2\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha3\", \"LABEL\" : \"Alpha 3\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha4\", \"LABEL\" : \"Alpha 4\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha5\", \"LABEL\" : \"Alpha 5\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha6\", \"LABEL\" : \"Alpha 6\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha7\", \"LABEL\" : \"Alpha 7\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"NAME\": \"alpha8\", \"LABEL\" : \"Alpha 8\", \"DEFAULT\": 0, \"MAX\": 1, \"MIN\": 0, \"TYPE\": \"float\" },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 1\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode1\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 2\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode2\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 3\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode3\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 4\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode4\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 5\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode5\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 6\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode6\"\n        },\n        { \"VALUES\" : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ],\n           \"LABELS\" : [ \"Add\", \"Average\", \"Color Burn\", \"Color Dodge\", \"Darken\", \"Difference\", \n                        \"Exclusion\", \"Glow\", \"Hard Light\", \"Hard Mix\", \"Lighten\", \"Linear Burn\", \n                        \"Linear Dodge\", \"Linear Light\", \"Multiply\", \"Negation\", \"Normal\", \"Overlay\", \n                        \"Phoenix\", \"Pin Light\", \"Reflect\", \"Screen\", \"Soft Light\", \"Subtract\", \"Vivid Light\"],\n           \"IDENTITY\" : 1,\n           \"DEFAULT\" : 1,\n           \"LABEL\" : \"Mode 7\",\n           \"TYPE\" : \"long\",\n           \"NAME\" : \"mode7\"\n        }\n    ],\n    \"ISFVSN\": \"2\"\n}\n*/\n\n/* Blend mode implementations courtesy of Jamie Owen:\n\n   https://github.com/jamieowen/glsl-blend\n\nThe MIT License (MIT) Copyright (c) 2015 Jamie Owen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\nvec3 blendPhoenix(vec3 base, vec3 blend) {\n  return min(base, blend) - max(base, blend) + vec3(1.0);\n}\n\nvec3 blendPhoenix(vec3 base, vec3 blend, float opacity) {\n  return (blendPhoenix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendOverlay(float base, float blend) {\n  return base < 0.5 ? (2.0 * base * blend)\n                    : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return vec3(blendOverlay(base.r, blend.r), blendOverlay(base.g, blend.g),\n              blendOverlay(base.b, blend.b));\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n  return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNormal(vec3 base, vec3 blend) { return blend; }\n\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendNegation(vec3 base, vec3 blend) {\n  return vec3(1.0) - abs(vec3(1.0) - base - blend);\n}\n\nvec3 blendNegation(vec3 base, vec3 blend, float opacity) {\n  return (blendNegation(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMultiply(vec3 base, vec3 blend) { return base * blend; }\n\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n  return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendReflect(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0);\n}\n\nvec3 blendReflect(vec3 base, vec3 blend) {\n  return vec3(blendReflect(base.r, blend.r), blendReflect(base.g, blend.g),\n              blendReflect(base.b, blend.b));\n}\n\nvec3 blendReflect(vec3 base, vec3 blend, float opacity) {\n  return (blendReflect(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendAverage(vec3 base, vec3 blend) { return (base + blend) / 2.0; }\n\nvec3 blendAverage(vec3 base, vec3 blend, float opacity) {\n  return (blendAverage(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearBurn(float base, float blend) {\n  // Note : Same implementation as BlendSubtractf\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendSubtract\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLighten(float base, float blend) { return max(blend, base); }\n\nvec3 blendLighten(vec3 base, vec3 blend) {\n  return vec3(blendLighten(base.r, blend.r), blendLighten(base.g, blend.g),\n              blendLighten(base.b, blend.b));\n}\n\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\n  return (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendScreen(float base, float blend) {\n  return 1.0 - ((1.0 - base) * (1.0 - blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n  return vec3(blendScreen(base.r, blend.r), blendScreen(base.g, blend.g),\n              blendScreen(base.b, blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n  return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSoftLight(float base, float blend) {\n  return (blend < 0.5)\n             ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend))\n             : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n  return vec3(blendSoftLight(base.r, blend.r), blendSoftLight(base.g, blend.g),\n              blendSoftLight(base.b, blend.b));\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n  return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendSubtract(float base, float blend) {\n  return max(base + blend - 1.0, 0.0);\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend) {\n  return max(base + blend - vec3(1.0), vec3(0.0));\n}\n\nvec3 blendSubtract(vec3 base, vec3 blend, float opacity) {\n  return (blendSubtract(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend) {\n  return base + blend - 2.0 * base * blend;\n}\n\nvec3 blendExclusion(vec3 base, vec3 blend, float opacity) {\n  return (blendExclusion(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendDifference(vec3 base, vec3 blend) { return abs(base - blend); }\n\nvec3 blendDifference(vec3 base, vec3 blend, float opacity) {\n  return (blendDifference(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendDarken(float base, float blend) { return min(blend, base); }\n\nvec3 blendDarken(vec3 base, vec3 blend) {\n  return vec3(blendDarken(base.r, blend.r), blendDarken(base.g, blend.g),\n              blendDarken(base.b, blend.b));\n}\n\nvec3 blendDarken(vec3 base, vec3 blend, float opacity) {\n  return (blendDarken(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorDodge(float base, float blend) {\n  return (blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0);\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend) {\n  return vec3(blendColorDodge(base.r, blend.r),\n              blendColorDodge(base.g, blend.g),\n              blendColorDodge(base.b, blend.b));\n}\n\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendColorBurn(float base, float blend) {\n  return (blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0);\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend) {\n  return vec3(blendColorBurn(base.r, blend.r), blendColorBurn(base.g, blend.g),\n              blendColorBurn(base.b, blend.b));\n}\n\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n  return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendAdd(float base, float blend) { return min(base + blend, 1.0); }\n\nvec3 blendAdd(vec3 base, vec3 blend) { return min(base + blend, vec3(1.0)); }\n\nvec3 blendAdd(vec3 base, vec3 blend, float opacity) {\n  return (blendAdd(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearDodge(float base, float blend) {\n  // Note : Same implementation as BlendAddf\n  return min(base + blend, 1.0);\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\n  // Note : Same implementation as BlendAdd\n  return min(base + blend, vec3(1.0));\n}\n\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendHardLight(vec3 base, vec3 blend) { return blendOverlay(blend, base); }\n\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n  return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendGlow(vec3 base, vec3 blend) { return blendReflect(blend, base); }\n\nvec3 blendGlow(vec3 base, vec3 blend, float opacity) {\n  return (blendGlow(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendVividLight(float base, float blend) {\n  return (blend < 0.5) ? blendColorBurn(base, (2.0 * blend))\n                       : blendColorDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend) {\n  return vec3(blendVividLight(base.r, blend.r),\n              blendVividLight(base.g, blend.g),\n              blendVividLight(base.b, blend.b));\n}\n\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n  return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendHardMix(float base, float blend) {\n  return (blendVividLight(base, blend) < 0.5) ? 0.0 : 1.0;\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend) {\n  return vec3(blendHardMix(base.r, blend.r), blendHardMix(base.g, blend.g),\n              blendHardMix(base.b, blend.b));\n}\n\nvec3 blendHardMix(vec3 base, vec3 blend, float opacity) {\n  return (blendHardMix(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendLinearLight(float base, float blend) {\n  return blend < 0.5 ? blendLinearBurn(base, (2.0 * blend))\n                     : blendLinearDodge(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend) {\n  return vec3(blendLinearLight(base.r, blend.r),\n              blendLinearLight(base.g, blend.g),\n              blendLinearLight(base.b, blend.b));\n}\n\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\n  return (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nfloat blendPinLight(float base, float blend) {\n  return (blend < 0.5) ? blendDarken(base, (2.0 * blend))\n                       : blendLighten(base, (2.0 * (blend - 0.5)));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend) {\n  return vec3(blendPinLight(base.r, blend.r), blendPinLight(base.g, blend.g),\n              blendPinLight(base.b, blend.b));\n}\n\nvec3 blendPinLight(vec3 base, vec3 blend, float opacity) {\n  return (blendPinLight(base, blend) * opacity + base * (1.0 - opacity));\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend) {\n  if (mode == 1) {\n    return blendAdd(base, blend);\n  } else if (mode == 2) {\n    return blendAverage(base, blend);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend);\n  } else if (mode == 5) {\n    return blendDarken(base, blend);\n  } else if (mode == 6) {\n    return blendDifference(base, blend);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend);\n  } else if (mode == 8) {\n    return blendGlow(base, blend);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend);\n  } else if (mode == 11) {\n    return blendLighten(base, blend);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend);\n  } else if (mode == 16) {\n    return blendNegation(base, blend);\n  } else if (mode == 17) {\n    return blendNormal(base, blend);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend);\n  } else if (mode == 21) {\n    return blendReflect(base, blend);\n  } else if (mode == 22) {\n    return blendScreen(base, blend);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend);\n  }\n}\n\nvec3 blendMode(int mode, vec3 base, vec3 blend, float opacity) {\n  if (mode == 1) {\n    return blendAdd(base, blend, opacity);\n  } else if (mode == 2) {\n    return blendAverage(base, blend, opacity);\n  } else if (mode == 3) {\n    return blendColorBurn(base, blend, opacity);\n  } else if (mode == 4) {\n    return blendColorDodge(base, blend, opacity);\n  } else if (mode == 5) {\n    return blendDarken(base, blend, opacity);\n  } else if (mode == 6) {\n    return blendDifference(base, blend, opacity);\n  } else if (mode == 7) {\n    return blendExclusion(base, blend, opacity);\n  } else if (mode == 8) {\n    return blendGlow(base, blend, opacity);\n  } else if (mode == 9) {\n    return blendHardLight(base, blend, opacity);\n  } else if (mode == 10) {\n    return blendHardMix(base, blend, opacity);\n  } else if (mode == 11) {\n    return blendLighten(base, blend, opacity);\n  } else if (mode == 12) {\n    return blendLinearBurn(base, blend, opacity);\n  } else if (mode == 13) {\n    return blendLinearDodge(base, blend, opacity);\n  } else if (mode == 14) {\n    return blendLinearLight(base, blend, opacity);\n  } else if (mode == 15) {\n    return blendMultiply(base, blend, opacity);\n  } else if (mode == 16) {\n    return blendNegation(base, blend, opacity);\n  } else if (mode == 17) {\n    return blendNormal(base, blend, opacity);\n  } else if (mode == 18) {\n    return blendOverlay(base, blend, opacity);\n  } else if (mode == 19) {\n    return blendPhoenix(base, blend, opacity);\n  } else if (mode == 20) {\n    return blendPinLight(base, blend, opacity);\n  } else if (mode == 21) {\n    return blendReflect(base, blend, opacity);\n  } else if (mode == 22) {\n    return blendScreen(base, blend, opacity);\n  } else if (mode == 23) {\n    return blendSoftLight(base, blend, opacity);\n  } else if (mode == 24) {\n    return blendSubtract(base, blend, opacity);\n  } else if (mode == 25) {\n    return blendVividLight(base, blend, opacity);\n  }\n}\n\nvoid main()\t{\n  gl_FragColor.rgb = \n    blendMode(mode1, alpha1 * IMG_THIS_NORM_PIXEL(t1).rgb * IMG_THIS_NORM_PIXEL(t1).a,\n    blendMode(mode2, alpha2 * IMG_THIS_NORM_PIXEL(t2).rgb * IMG_THIS_NORM_PIXEL(t2).a,\n    blendMode(mode3, alpha3 * IMG_THIS_NORM_PIXEL(t3).rgb * IMG_THIS_NORM_PIXEL(t3).a,\n    blendMode(mode4, alpha4 * IMG_THIS_NORM_PIXEL(t4).rgb * IMG_THIS_NORM_PIXEL(t4).a,\n    blendMode(mode5, alpha5 * IMG_THIS_NORM_PIXEL(t5).rgb * IMG_THIS_NORM_PIXEL(t5).a,\n    blendMode(mode6, alpha6 * IMG_THIS_NORM_PIXEL(t6).rgb * IMG_THIS_NORM_PIXEL(t6).a,\n    blendMode(mode7, alpha7 * IMG_THIS_NORM_PIXEL(t7).rgb * IMG_THIS_NORM_PIXEL(t7).a,\n                     alpha8 * IMG_THIS_NORM_PIXEL(t8).rgb * IMG_THIS_NORM_PIXEL(t8).a)))))));\n\n  gl_FragColor.a = 1.0; \n}","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":1,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":2,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":3,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":4,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":5,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":6,"Hidden":false},{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":7,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":8,"Hidden":true,"Custom":"alpha1","Exposed":"alpha1","Address":"Code Controls:/1/control/2","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":9,"Hidden":true,"Custom":"alpha2","Exposed":"alpha2","Address":"Code Controls:/1/control/6","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":10,"Hidden":true,"Custom":"alpha3","Exposed":"alpha3","Address":"Code Controls:/1/control/10","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":11,"Hidden":true,"Custom":"alpha4","Exposed":"alpha4","Address":"Code Controls:/1/control/14","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":12,"Hidden":true,"Custom":"alpha5","Exposed":"alpha5","Address":"Code Controls:/1/control/18","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":13,"Hidden":true,"Custom":"alpha6","Exposed":"alpha6","Address":"Code Controls:/1/control/22","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":14,"Hidden":true,"Custom":"alpha7","Exposed":"alpha7","Address":"Code Controls:/1/control/26","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":15,"Hidden":true,"Custom":"alpha8","Exposed":"alpha8","Address":"Code Controls:/1/control/30","Value":{"Float":0.0},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":16,"Hidden":true,"Custom":"mode1","Exposed":"mode1","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":17,"Hidden":true,"Custom":"mode2","Exposed":"mode2","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":18,"Hidden":true,"Custom":"mode3","Exposed":"mode3","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":19,"Hidden":true,"Custom":"mode4","Exposed":"mode4","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":20,"Hidden":true,"Custom":"mode5","Exposed":"mode5","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":21,"Hidden":true,"Custom":"mode6","Exposed":"mode6","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]},{"uuid":"485680cc-b8b9-4a01-acc7-3e8334bdc016","ObjectName":"Inlet","id":22,"Hidden":true,"Custom":"mode7","Exposed":"mode7","Value":{"Int":1},"Domain":{"Int":{"Values":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"Values":[["Add",{"Int":1}],["Average",{"Int":2}],["Color Burn",{"Int":3}],["Color Dodge",{"Int":4}],["Darken",{"Int":5}],["Difference",{"Int":6}],["Exclusion",{"Int":7}],["Glow",{"Int":8}],["Hard Light",{"Int":9}],["Hard Mix",{"Int":10}],["Lighten",{"Int":11}],["Linear Burn",{"Int":12}],["Linear Dodge",{"Int":13}],["Linear Light",{"Int":14}],["Multiply",{"Int":15}],["Negation",{"Int":16}],["Normal",{"Int":17}],["Overlay",{"Int":18}],["Phoenix",{"Int":19}],["Pin Light",{"Int":20}],["Reflect",{"Int":21}],["Screen",{"Int":22}],["Soft Light",{"Int":23}],["Subtract",{"Int":24}],["Vivid Light",{"Int":25}]]}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]},{"uuid":"74ca45ff-92c9-44a0-8f1a-754dea05ee1b","ObjectName":"gfxProcess","id":2,"Metadata":{"ScriptingName":"2TweetsChallenge","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":10608771064,"Height":300.0,"StartOffset":0,"LoopDuration":10608771064,"Pos":[348.5999999999999,-876.89],"Size":[146.609375,22.0],"Loops":false,"Vertex":"","Fragment":"/*{\n\t\"CREDIT\" : \"2TweetsChallenge by Nimitz\",\n\t\"CATEGORIES\" : [\n\t\t\"ci\"\n\t],\n\t\"DESCRIPTION\": \"\",\n\t\"INPUTS\": [\n\t\t{\n\t\t\t\"NAME\": \"inputImage\",\n\t\t\t\"TYPE\" : \"image\"\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"iZoom\",\n\t\t\t\"TYPE\" : \"float\",\n\t\t\t\"MIN\" : 0.0,\n\t\t\t\"MAX\" : 1.0,\n\t\t\t\"DEFAULT\" : 1.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"iSteps\",\n\t\t\t\"TYPE\" : \"float\",\n\t\t\t\"MIN\" : 2.0,\n\t\t\t\"MAX\" : 75.0,\n\t\t\t\"DEFAULT\" : 19.0\n\t\t},\n\t\t{\n\t\t\t\"NAME\" :\"iMouse\",\n\t\t\t\"TYPE\" : \"point2D\",\n\t\t\t\"DEFAULT\" : [0.0, 0.0],\n\t\t\t\"MAX\" : [640.0, 480.0],\n\t\t\t\"MIN\" : [0.0, 0.0]\n\t\t},\n\t\t{\n\t\t\t\"NAME\": \"iColor\", \n\t\t\t\"TYPE\" : \"color\", \n\t\t\t\"DEFAULT\" : [\n\t\t\t\t0.9, \n\t\t\t\t0.6, \n\t\t\t\t0.0, \n\t\t\t\t1.0\n\t\t\t]\n\t\t}\n\t]\n}\n*/\n// https://www.shadertoy.com/view/4tl3W8\n\nvoid main(void)\n{\n    vec4 p = vec4(gl_FragCoord.xy,0.,1.)/RENDERSIZE.y - vec4(.9,.5,0,0), c=p-p;\n    float t=TIME,r=length(p.xy+=sin(t+sin(t*.8))*.4),a=atan(p.y,p.x);\n    for (float i = 0.;i<60.;i++)\n        c = c*.98 + (sin(i+vec4(5,3,2,1))*.5+.5)*smoothstep(.99, 1., sin(log(r+i*.05)-t-i+sin(a +=t*.01)));\n    gl_FragColor = c*r;\n}\n","Inlets":[{"uuid":"5ac86198-2d03-4830-9e41-a6d529922d29","ObjectName":"Inlet","id":0,"Hidden":false},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"iZoom","Exposed":"izoom","Value":{"Float":0.6104999780654907},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},{"uuid":"af2b4fc3-aecb-4c15-a5aa-1c573a239925","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"iSteps","Exposed":"isteps","Value":{"Float":34.39983367919922},"Domain":{"Float":{"Min":2.0,"Max":75.0}}},{"uuid":"8093743c-584f-4bb9-97d4-6c7602f87116","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"iMouse","Exposed":"imouse","Value":{"Vec2f":[317.63201904296875,259.3775939941406]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[640.0,480.0],"Values":[[],[]]}}},{"uuid":"8f38638e-9f9f-48b0-ae36-1cba86ef5703","ObjectName":"Inlet","id":4,"Hidden":true,"Custom":"iColor","Exposed":"icolor","Value":{"Vec4f":[0.4739452302455902,0.9000076055526733,0.2523384392261505,1.0]},"Domain":{}}],"Outlets":[{"uuid":"f1c71046-b754-49a5-8e66-d01374773dfc","ObjectName":"Outlet","id":1,"Hidden":false}]}],"SmallViewRack":[{"Processes":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40],"Process":null,"Height":200.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":10608771064,"MinDuration":10608771064,"MaxDuration":11113200000,"GuiDuration":11669648170,"Speed":1.0,"Rigidity":false,"MinNull":false,"MaxInf":true,"Signatures":[[0,[4,4]]],"StartState":0,"EndState":1,"StartDate":0,"HeightPercentage":0.0,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":15120000.0,"Center":0,"ViewMode":1,"SmallViewShown":true,"HasSignature":true},"StartTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":0,"Metadata":{"ScriptingName":"Sync.start","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":0,"Events":[0],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},"EndTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":1,"Metadata":{"ScriptingName":"Sync.end","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":10608771064,"Events":[1],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},"StartEvent":{"ObjectName":"Scenario::EventModel","id":0,"Metadata":{"ScriptingName":"Event.start","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":0,"States":[0],"Condition":"","Date":0,"Offset":0},"EndEvent":{"ObjectName":"Scenario::EventModel","id":1,"Metadata":{"ScriptingName":"Event.end","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":1,"States":[1],"Condition":"","Date":10608771064,"Offset":0},"StartState":{"ObjectName":"Scenario::StateModel","id":0,"Metadata":{"ScriptingName":"State.start","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":0,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},"EndState":{"ObjectName":"Scenario::StateModel","id":1,"Metadata":{"ScriptingName":"State.end","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":1,"PreviousConstraint":0,"NextConstraint":null,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]}},"Speed":1.0,"Cables":[{"ObjectName":"Process::Cable","id":38,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":36},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":38},{"ObjectName":"Inlet","ObjectId":3}]},{"ObjectName":"Process::Cable","id":37,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":38},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":40},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":36,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":38},{"ObjectName":"Inlet","ObjectId":1}]},{"ObjectName":"Process::Cable","id":35,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":38},{"ObjectName":"Inlet","ObjectId":2}]},{"ObjectName":"Process::Cable","id":34,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":39},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":38},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":33,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":39},{"ObjectName":"Inlet","ObjectId":1}]},{"ObjectName":"Process::Cable","id":32,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":36},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":39},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":31,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":19},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":7}]},{"ObjectName":"Process::Cable","id":30,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":25},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":24,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":24},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":6}]},{"ObjectName":"Process::Cable","id":23,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":32},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":5}]},{"ObjectName":"Process::Cable","id":22,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":28},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":4}]},{"ObjectName":"Process::Cable","id":21,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":21},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":3}]},{"ObjectName":"Process::Cable","id":20,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":27},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":2}]},{"ObjectName":"Process::Cable","id":19,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":23},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":1}]},{"ObjectName":"Process::Cable","id":18,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":22},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":37},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":17,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":17},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":7}]},{"ObjectName":"Process::Cable","id":16,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":16},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":0}]},{"ObjectName":"Process::Cable","id":15,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":15},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":7}]},{"ObjectName":"Process::Cable","id":14,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":14},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":6}]},{"ObjectName":"Process::Cable","id":13,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":13},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":6}]},{"ObjectName":"Process::Cable","id":12,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":12},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":5}]},{"ObjectName":"Process::Cable","id":11,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":11},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":5}]},{"ObjectName":"Process::Cable","id":10,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":10},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":4}]},{"ObjectName":"Process::Cable","id":9,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":9},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":4}]},{"ObjectName":"Process::Cable","id":8,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":8},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":3}]},{"ObjectName":"Process::Cable","id":7,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":7},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":3}]},{"ObjectName":"Process::Cable","id":6,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":5},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":2}]},{"ObjectName":"Process::Cable","id":5,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":3},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":6},{"ObjectName":"Inlet","ObjectId":1}]},{"ObjectName":"Process::Cable","id":3,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":4},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":2}]},{"ObjectName":"Process::Cable","id":2,"Type":0,"Source":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":2},{"ObjectName":"Outlet","ObjectId":1}],"Sink":[{"ObjectName":"Scenario::ScenarioDocumentModel","ObjectId":1},{"ObjectName":"Scenario::BaseScenario","ObjectId":0},{"ObjectName":"Scenario::IntervalModel","ObjectId":0},{"ObjectName":"gfxProcess","ObjectId":1},{"ObjectName":"Inlet","ObjectId":1}]}],"BusIntervals":[]},"Plugins":[{"uuid":"1f923578-08c3-49be-9ba9-69c144ee2e32","Refresh":false,"Reconnect":false,"MidiRatio":1.0},{"uuid":"6e610e1f-9de2-4c36-90dd-0ef570002a21","RootNode":{},"Children":[{"Device":{"Name":"Code Controls","Protocol":"f5e04ef0-16dd-4997-8f81-f5a04b8702bc","API":1,"IO":0,"Port":714782396,"Manufacturer":"Livid Instruments, Inc.","DeviceName":"Code","PortName":"Controls","DisplayName":"Code Controls","CreateWholeTree":false,"VirtualPort":false},"Children":[{"Address":{"ClipMode":"Free","RepetitionFilter":false,"Value":{},"Domain":{},"Name":"1"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Tuple":[{"Int":37},{"Int":0}]},"Domain":{"Tuple":{"Min":[{"Int":0},{"Int":0}],"Max":[{"Int":127},{"Int":127}],"Values":[]}},"Name":"on"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"33"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"34"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"35"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"37"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"36"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"38"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"39"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"40"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"41"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"42"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"43"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"44"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"45"}}]},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Tuple":[{"Int":29},{"Int":108}]},"Domain":{"Tuple":{"Min":[{"Int":0},{"Int":0}],"Max":[{"Int":127},{"Int":127}],"Values":[]}},"Name":"control"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"1"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":3},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"5"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"2"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"3"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":127},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"4"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":36},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"6"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"7"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"8"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"9"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"10"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"11"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"12"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"13"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"14"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"15"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"16"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"20"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":66},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"19"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"17"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"18"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"21"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":3},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"22"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":66},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"23"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"24"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":127},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"25"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"26"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":21},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"27"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":3},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"28"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":108},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"29"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":127},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"30"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"31"}},{"Address":{"ioType":"<->","ClipMode":"Clip","RepetitionFilter":false,"Value":{"Int":102},"Domain":{"Int":{"Min":0,"Max":127}},"Name":"32"}}]}]}]},{"Device":{"Name":"Window","Protocol":"5a181207-7d40-4ad8-814e-879fcdf8cc31"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Int":0},"Domain":{"Int":{"Min":0,"Max":100}},"Name":"screen"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[1920.0,0.0]},"Domain":{},"Name":"position"}},{"Address":{"ClipMode":"Free","RepetitionFilter":false,"Value":{},"Domain":{},"Name":"cursor"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.0,0.0]},"Domain":{"Float":{"Min":0.0,"Max":1.0}},"Name":"scaled"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.19921875,131.83203125]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[640.0,360.0],"Values":[[],[]]}},"Name":"absolute"}}]},{"Address":{"ClipMode":"Free","RepetitionFilter":false,"Value":{},"Domain":{},"Name":"tablet"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.0,0.0]},"Domain":{"Float":{"Min":0.0,"Max":1.0}},"Name":"scaled"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[0.0,0.0]},"Domain":{"Vec2f":{"Min":[0.0,0.0],"Max":[640.0,360.0],"Values":[[],[]]}},"Name":"absolute"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Int":0},"Domain":{},"Name":"z"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Float":0.0},"Domain":{},"Name":"pressure"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Float":0.0},"Domain":{"Float":{"Min":-1.0,"Max":1.0}},"Name":"tangential"}},{"Address":{"ioType":"<->","ClipMode":"Free","Unit":"angle.degree","RepetitionFilter":false,"Value":{"Float":0.0},"Domain":{"Float":{"Min":-180.0,"Max":180.0}},"Name":"rotation"}},{"Address":{"ioType":"<->","ClipMode":"Free","Unit":"angle.degree","RepetitionFilter":false,"Value":{"Float":0.0},"Domain":{"Float":{"Min":-60.0,"Max":60.0}},"Name":"tilt_x"}},{"Address":{"ioType":"<->","ClipMode":"Free","Unit":"angle.degree","RepetitionFilter":false,"Value":{"Float":0.0},"Domain":{"Float":{"Min":-60.0,"Max":60.0}},"Name":"tilt_y"}}]},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[640.0,360.0]},"Domain":{},"Name":"size"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Vec2f":[640.0,360.0]},"Domain":{},"Extended":{"description":"Set to [0, 0] to use the viewport's size"},"Name":"rendersize"}},{"Address":{"ClipMode":"Free","RepetitionFilter":false,"Value":{},"Domain":{},"Name":"key"},"Children":[{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Int":0},"Domain":{},"Name":"code"}},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"String":""},"Domain":{},"Name":"text"}}]},{"Address":{"ioType":"<->","ClipMode":"Free","RepetitionFilter":false,"Value":{"Bool":false},"Domain":{},"Name":"fullscreen"}}]}]}],"Version":4,"Commit":"ea4e943c6f7819824a24b4de5226b6c822debd06","Tag":"3.2.0"}